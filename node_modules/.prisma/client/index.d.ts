
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model CompanyEmployee
 * 
 */
export type CompanyEmployee = $Result.DefaultSelection<Prisma.$CompanyEmployeePayload>
/**
 * Model CompanyPolicy
 * 
 */
export type CompanyPolicy = $Result.DefaultSelection<Prisma.$CompanyPolicyPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model CompanySetting
 * 
 */
export type CompanySetting = $Result.DefaultSelection<Prisma.$CompanySettingPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.company.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.company.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyEmployee`: Exposes CRUD operations for the **CompanyEmployee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyEmployees
    * const companyEmployees = await prisma.companyEmployee.findMany()
    * ```
    */
  get companyEmployee(): Prisma.CompanyEmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyPolicy`: Exposes CRUD operations for the **CompanyPolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyPolicies
    * const companyPolicies = await prisma.companyPolicy.findMany()
    * ```
    */
  get companyPolicy(): Prisma.CompanyPolicyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companySetting`: Exposes CRUD operations for the **CompanySetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanySettings
    * const companySettings = await prisma.companySetting.findMany()
    * ```
    */
  get companySetting(): Prisma.CompanySettingDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Company: 'Company',
    CompanyEmployee: 'CompanyEmployee',
    CompanyPolicy: 'CompanyPolicy',
    Department: 'Department',
    CompanySetting: 'CompanySetting'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "company" | "companyEmployee" | "companyPolicy" | "department" | "companySetting"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      CompanyEmployee: {
        payload: Prisma.$CompanyEmployeePayload<ExtArgs>
        fields: Prisma.CompanyEmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyEmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyEmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>
          }
          findFirst: {
            args: Prisma.CompanyEmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyEmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>
          }
          findMany: {
            args: Prisma.CompanyEmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>[]
          }
          create: {
            args: Prisma.CompanyEmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>
          }
          createMany: {
            args: Prisma.CompanyEmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyEmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>[]
          }
          delete: {
            args: Prisma.CompanyEmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>
          }
          update: {
            args: Prisma.CompanyEmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>
          }
          deleteMany: {
            args: Prisma.CompanyEmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyEmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyEmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>[]
          }
          upsert: {
            args: Prisma.CompanyEmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyEmployeePayload>
          }
          aggregate: {
            args: Prisma.CompanyEmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyEmployee>
          }
          groupBy: {
            args: Prisma.CompanyEmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyEmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyEmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyEmployeeCountAggregateOutputType> | number
          }
        }
      }
      CompanyPolicy: {
        payload: Prisma.$CompanyPolicyPayload<ExtArgs>
        fields: Prisma.CompanyPolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyPolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyPolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>
          }
          findFirst: {
            args: Prisma.CompanyPolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyPolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>
          }
          findMany: {
            args: Prisma.CompanyPolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>[]
          }
          create: {
            args: Prisma.CompanyPolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>
          }
          createMany: {
            args: Prisma.CompanyPolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyPolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>[]
          }
          delete: {
            args: Prisma.CompanyPolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>
          }
          update: {
            args: Prisma.CompanyPolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyPolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyPolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyPolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyPolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPolicyPayload>
          }
          aggregate: {
            args: Prisma.CompanyPolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyPolicy>
          }
          groupBy: {
            args: Prisma.CompanyPolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyPolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyPolicyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyPolicyCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      CompanySetting: {
        payload: Prisma.$CompanySettingPayload<ExtArgs>
        fields: Prisma.CompanySettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanySettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanySettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>
          }
          findFirst: {
            args: Prisma.CompanySettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanySettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>
          }
          findMany: {
            args: Prisma.CompanySettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>[]
          }
          create: {
            args: Prisma.CompanySettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>
          }
          createMany: {
            args: Prisma.CompanySettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanySettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>[]
          }
          delete: {
            args: Prisma.CompanySettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>
          }
          update: {
            args: Prisma.CompanySettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>
          }
          deleteMany: {
            args: Prisma.CompanySettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanySettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanySettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>[]
          }
          upsert: {
            args: Prisma.CompanySettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingPayload>
          }
          aggregate: {
            args: Prisma.CompanySettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanySetting>
          }
          groupBy: {
            args: Prisma.CompanySettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanySettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanySettingCountArgs<ExtArgs>
            result: $Utils.Optional<CompanySettingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    company?: CompanyOmit
    companyEmployee?: CompanyEmployeeOmit
    companyPolicy?: CompanyPolicyOmit
    department?: DepartmentOmit
    companySetting?: CompanySettingOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    employees: number
    departments: number
    policies: number
    CompanySetting: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | CompanyCountOutputTypeCountEmployeesArgs
    departments?: boolean | CompanyCountOutputTypeCountDepartmentsArgs
    policies?: boolean | CompanyCountOutputTypeCountPoliciesArgs
    CompanySetting?: boolean | CompanyCountOutputTypeCountCompanySettingArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyEmployeeWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountPoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyPolicyWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountCompanySettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanySettingWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    employees: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | DepartmentCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyEmployeeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    version: number | null
  }

  export type CompanySumAggregateOutputType = {
    version: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    registration_number: string | null
    email: string | null
    phone: string | null
    website: string | null
    industry: string | null
    logo_url: string | null
    status: string | null
    subscription_tier: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    version: number | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    registration_number: string | null
    email: string | null
    phone: string | null
    website: string | null
    industry: string | null
    logo_url: string | null
    status: string | null
    subscription_tier: string | null
    created_at: Date | null
    updated_at: Date | null
    created_by: string | null
    updated_by: string | null
    version: number | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    registration_number: number
    email: number
    phone: number
    website: number
    industry: number
    address: number
    logo_url: number
    status: number
    subscription_tier: number
    billing_info: number
    settings: number
    created_at: number
    updated_at: number
    created_by: number
    updated_by: number
    version: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    version?: true
  }

  export type CompanySumAggregateInputType = {
    version?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    registration_number?: true
    email?: true
    phone?: true
    website?: true
    industry?: true
    logo_url?: true
    status?: true
    subscription_tier?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    version?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    registration_number?: true
    email?: true
    phone?: true
    website?: true
    industry?: true
    logo_url?: true
    status?: true
    subscription_tier?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    version?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    registration_number?: true
    email?: true
    phone?: true
    website?: true
    industry?: true
    address?: true
    logo_url?: true
    status?: true
    subscription_tier?: true
    billing_info?: true
    settings?: true
    created_at?: true
    updated_at?: true
    created_by?: true
    updated_by?: true
    version?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    registration_number: string
    email: string
    phone: string | null
    website: string | null
    industry: string | null
    address: JsonValue | null
    logo_url: string | null
    status: string
    subscription_tier: string
    billing_info: JsonValue | null
    settings: JsonValue | null
    created_at: Date
    updated_at: Date
    created_by: string | null
    updated_by: string | null
    version: number
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    registration_number?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    industry?: boolean
    address?: boolean
    logo_url?: boolean
    status?: boolean
    subscription_tier?: boolean
    billing_info?: boolean
    settings?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    version?: boolean
    employees?: boolean | Company$employeesArgs<ExtArgs>
    departments?: boolean | Company$departmentsArgs<ExtArgs>
    policies?: boolean | Company$policiesArgs<ExtArgs>
    CompanySetting?: boolean | Company$CompanySettingArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    registration_number?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    industry?: boolean
    address?: boolean
    logo_url?: boolean
    status?: boolean
    subscription_tier?: boolean
    billing_info?: boolean
    settings?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    version?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    registration_number?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    industry?: boolean
    address?: boolean
    logo_url?: boolean
    status?: boolean
    subscription_tier?: boolean
    billing_info?: boolean
    settings?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    version?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    registration_number?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    industry?: boolean
    address?: boolean
    logo_url?: boolean
    status?: boolean
    subscription_tier?: boolean
    billing_info?: boolean
    settings?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by?: boolean
    updated_by?: boolean
    version?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "registration_number" | "email" | "phone" | "website" | "industry" | "address" | "logo_url" | "status" | "subscription_tier" | "billing_info" | "settings" | "created_at" | "updated_at" | "created_by" | "updated_by" | "version", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | Company$employeesArgs<ExtArgs>
    departments?: boolean | Company$departmentsArgs<ExtArgs>
    policies?: boolean | Company$policiesArgs<ExtArgs>
    CompanySetting?: boolean | Company$CompanySettingArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      employees: Prisma.$CompanyEmployeePayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      policies: Prisma.$CompanyPolicyPayload<ExtArgs>[]
      CompanySetting: Prisma.$CompanySettingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      registration_number: string
      email: string
      phone: string | null
      website: string | null
      industry: string | null
      address: Prisma.JsonValue | null
      logo_url: string | null
      status: string
      subscription_tier: string
      billing_info: Prisma.JsonValue | null
      settings: Prisma.JsonValue | null
      created_at: Date
      updated_at: Date
      created_by: string | null
      updated_by: string | null
      version: number
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employees<T extends Company$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Company$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departments<T extends Company$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Company$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    policies<T extends Company$policiesArgs<ExtArgs> = {}>(args?: Subset<T, Company$policiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CompanySetting<T extends Company$CompanySettingArgs<ExtArgs> = {}>(args?: Subset<T, Company$CompanySettingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly registration_number: FieldRef<"Company", 'String'>
    readonly email: FieldRef<"Company", 'String'>
    readonly phone: FieldRef<"Company", 'String'>
    readonly website: FieldRef<"Company", 'String'>
    readonly industry: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'Json'>
    readonly logo_url: FieldRef<"Company", 'String'>
    readonly status: FieldRef<"Company", 'String'>
    readonly subscription_tier: FieldRef<"Company", 'String'>
    readonly billing_info: FieldRef<"Company", 'Json'>
    readonly settings: FieldRef<"Company", 'Json'>
    readonly created_at: FieldRef<"Company", 'DateTime'>
    readonly updated_at: FieldRef<"Company", 'DateTime'>
    readonly created_by: FieldRef<"Company", 'String'>
    readonly updated_by: FieldRef<"Company", 'String'>
    readonly version: FieldRef<"Company", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.employees
   */
  export type Company$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    where?: CompanyEmployeeWhereInput
    orderBy?: CompanyEmployeeOrderByWithRelationInput | CompanyEmployeeOrderByWithRelationInput[]
    cursor?: CompanyEmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyEmployeeScalarFieldEnum | CompanyEmployeeScalarFieldEnum[]
  }

  /**
   * Company.departments
   */
  export type Company$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Company.policies
   */
  export type Company$policiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    where?: CompanyPolicyWhereInput
    orderBy?: CompanyPolicyOrderByWithRelationInput | CompanyPolicyOrderByWithRelationInput[]
    cursor?: CompanyPolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyPolicyScalarFieldEnum | CompanyPolicyScalarFieldEnum[]
  }

  /**
   * Company.CompanySetting
   */
  export type Company$CompanySettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    where?: CompanySettingWhereInput
    orderBy?: CompanySettingOrderByWithRelationInput | CompanySettingOrderByWithRelationInput[]
    cursor?: CompanySettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanySettingScalarFieldEnum | CompanySettingScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model CompanyEmployee
   */

  export type AggregateCompanyEmployee = {
    _count: CompanyEmployeeCountAggregateOutputType | null
    _avg: CompanyEmployeeAvgAggregateOutputType | null
    _sum: CompanyEmployeeSumAggregateOutputType | null
    _min: CompanyEmployeeMinAggregateOutputType | null
    _max: CompanyEmployeeMaxAggregateOutputType | null
  }

  export type CompanyEmployeeAvgAggregateOutputType = {
    budget_limit: number | null
  }

  export type CompanyEmployeeSumAggregateOutputType = {
    budget_limit: number | null
  }

  export type CompanyEmployeeMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    user_id: string | null
    employee_id: string | null
    department_id: string | null
    designation: string | null
    role: string | null
    budget_limit: number | null
    start_date: Date | null
    end_date: Date | null
    salary_band: string | null
    reporting_manager_id: string | null
    employment_type: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompanyEmployeeMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    user_id: string | null
    employee_id: string | null
    department_id: string | null
    designation: string | null
    role: string | null
    budget_limit: number | null
    start_date: Date | null
    end_date: Date | null
    salary_band: string | null
    reporting_manager_id: string | null
    employment_type: string | null
    status: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompanyEmployeeCountAggregateOutputType = {
    id: number
    company_id: number
    user_id: number
    employee_id: number
    department_id: number
    designation: number
    role: number
    budget_limit: number
    start_date: number
    end_date: number
    salary_band: number
    reporting_manager_id: number
    employment_type: number
    status: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CompanyEmployeeAvgAggregateInputType = {
    budget_limit?: true
  }

  export type CompanyEmployeeSumAggregateInputType = {
    budget_limit?: true
  }

  export type CompanyEmployeeMinAggregateInputType = {
    id?: true
    company_id?: true
    user_id?: true
    employee_id?: true
    department_id?: true
    designation?: true
    role?: true
    budget_limit?: true
    start_date?: true
    end_date?: true
    salary_band?: true
    reporting_manager_id?: true
    employment_type?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type CompanyEmployeeMaxAggregateInputType = {
    id?: true
    company_id?: true
    user_id?: true
    employee_id?: true
    department_id?: true
    designation?: true
    role?: true
    budget_limit?: true
    start_date?: true
    end_date?: true
    salary_band?: true
    reporting_manager_id?: true
    employment_type?: true
    status?: true
    created_at?: true
    updated_at?: true
  }

  export type CompanyEmployeeCountAggregateInputType = {
    id?: true
    company_id?: true
    user_id?: true
    employee_id?: true
    department_id?: true
    designation?: true
    role?: true
    budget_limit?: true
    start_date?: true
    end_date?: true
    salary_band?: true
    reporting_manager_id?: true
    employment_type?: true
    status?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CompanyEmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyEmployee to aggregate.
     */
    where?: CompanyEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyEmployees to fetch.
     */
    orderBy?: CompanyEmployeeOrderByWithRelationInput | CompanyEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyEmployees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyEmployees
    **/
    _count?: true | CompanyEmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyEmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyEmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyEmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyEmployeeMaxAggregateInputType
  }

  export type GetCompanyEmployeeAggregateType<T extends CompanyEmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyEmployee[P]>
      : GetScalarType<T[P], AggregateCompanyEmployee[P]>
  }




  export type CompanyEmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyEmployeeWhereInput
    orderBy?: CompanyEmployeeOrderByWithAggregationInput | CompanyEmployeeOrderByWithAggregationInput[]
    by: CompanyEmployeeScalarFieldEnum[] | CompanyEmployeeScalarFieldEnum
    having?: CompanyEmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyEmployeeCountAggregateInputType | true
    _avg?: CompanyEmployeeAvgAggregateInputType
    _sum?: CompanyEmployeeSumAggregateInputType
    _min?: CompanyEmployeeMinAggregateInputType
    _max?: CompanyEmployeeMaxAggregateInputType
  }

  export type CompanyEmployeeGroupByOutputType = {
    id: string
    company_id: string
    user_id: string
    employee_id: string
    department_id: string | null
    designation: string | null
    role: string
    budget_limit: number | null
    start_date: Date | null
    end_date: Date | null
    salary_band: string | null
    reporting_manager_id: string | null
    employment_type: string | null
    status: string
    created_at: Date
    updated_at: Date
    _count: CompanyEmployeeCountAggregateOutputType | null
    _avg: CompanyEmployeeAvgAggregateOutputType | null
    _sum: CompanyEmployeeSumAggregateOutputType | null
    _min: CompanyEmployeeMinAggregateOutputType | null
    _max: CompanyEmployeeMaxAggregateOutputType | null
  }

  type GetCompanyEmployeeGroupByPayload<T extends CompanyEmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyEmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyEmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyEmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyEmployeeGroupByOutputType[P]>
        }
      >
    >


  export type CompanyEmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    user_id?: boolean
    employee_id?: boolean
    department_id?: boolean
    designation?: boolean
    role?: boolean
    budget_limit?: boolean
    start_date?: boolean
    end_date?: boolean
    salary_band?: boolean
    reporting_manager_id?: boolean
    employment_type?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | CompanyEmployee$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["companyEmployee"]>

  export type CompanyEmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    user_id?: boolean
    employee_id?: boolean
    department_id?: boolean
    designation?: boolean
    role?: boolean
    budget_limit?: boolean
    start_date?: boolean
    end_date?: boolean
    salary_band?: boolean
    reporting_manager_id?: boolean
    employment_type?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | CompanyEmployee$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["companyEmployee"]>

  export type CompanyEmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    user_id?: boolean
    employee_id?: boolean
    department_id?: boolean
    designation?: boolean
    role?: boolean
    budget_limit?: boolean
    start_date?: boolean
    end_date?: boolean
    salary_band?: boolean
    reporting_manager_id?: boolean
    employment_type?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | CompanyEmployee$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["companyEmployee"]>

  export type CompanyEmployeeSelectScalar = {
    id?: boolean
    company_id?: boolean
    user_id?: boolean
    employee_id?: boolean
    department_id?: boolean
    designation?: boolean
    role?: boolean
    budget_limit?: boolean
    start_date?: boolean
    end_date?: boolean
    salary_band?: boolean
    reporting_manager_id?: boolean
    employment_type?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CompanyEmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "user_id" | "employee_id" | "department_id" | "designation" | "role" | "budget_limit" | "start_date" | "end_date" | "salary_band" | "reporting_manager_id" | "employment_type" | "status" | "created_at" | "updated_at", ExtArgs["result"]["companyEmployee"]>
  export type CompanyEmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | CompanyEmployee$departmentArgs<ExtArgs>
  }
  export type CompanyEmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | CompanyEmployee$departmentArgs<ExtArgs>
  }
  export type CompanyEmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | CompanyEmployee$departmentArgs<ExtArgs>
  }

  export type $CompanyEmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyEmployee"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      user_id: string
      employee_id: string
      department_id: string | null
      designation: string | null
      role: string
      budget_limit: number | null
      start_date: Date | null
      end_date: Date | null
      salary_band: string | null
      reporting_manager_id: string | null
      employment_type: string | null
      status: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["companyEmployee"]>
    composites: {}
  }

  type CompanyEmployeeGetPayload<S extends boolean | null | undefined | CompanyEmployeeDefaultArgs> = $Result.GetResult<Prisma.$CompanyEmployeePayload, S>

  type CompanyEmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyEmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyEmployeeCountAggregateInputType | true
    }

  export interface CompanyEmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyEmployee'], meta: { name: 'CompanyEmployee' } }
    /**
     * Find zero or one CompanyEmployee that matches the filter.
     * @param {CompanyEmployeeFindUniqueArgs} args - Arguments to find a CompanyEmployee
     * @example
     * // Get one CompanyEmployee
     * const companyEmployee = await prisma.companyEmployee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyEmployeeFindUniqueArgs>(args: SelectSubset<T, CompanyEmployeeFindUniqueArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanyEmployee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyEmployeeFindUniqueOrThrowArgs} args - Arguments to find a CompanyEmployee
     * @example
     * // Get one CompanyEmployee
     * const companyEmployee = await prisma.companyEmployee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyEmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyEmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyEmployee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyEmployeeFindFirstArgs} args - Arguments to find a CompanyEmployee
     * @example
     * // Get one CompanyEmployee
     * const companyEmployee = await prisma.companyEmployee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyEmployeeFindFirstArgs>(args?: SelectSubset<T, CompanyEmployeeFindFirstArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyEmployee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyEmployeeFindFirstOrThrowArgs} args - Arguments to find a CompanyEmployee
     * @example
     * // Get one CompanyEmployee
     * const companyEmployee = await prisma.companyEmployee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyEmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyEmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanyEmployees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyEmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyEmployees
     * const companyEmployees = await prisma.companyEmployee.findMany()
     * 
     * // Get first 10 CompanyEmployees
     * const companyEmployees = await prisma.companyEmployee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyEmployeeWithIdOnly = await prisma.companyEmployee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyEmployeeFindManyArgs>(args?: SelectSubset<T, CompanyEmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanyEmployee.
     * @param {CompanyEmployeeCreateArgs} args - Arguments to create a CompanyEmployee.
     * @example
     * // Create one CompanyEmployee
     * const CompanyEmployee = await prisma.companyEmployee.create({
     *   data: {
     *     // ... data to create a CompanyEmployee
     *   }
     * })
     * 
     */
    create<T extends CompanyEmployeeCreateArgs>(args: SelectSubset<T, CompanyEmployeeCreateArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanyEmployees.
     * @param {CompanyEmployeeCreateManyArgs} args - Arguments to create many CompanyEmployees.
     * @example
     * // Create many CompanyEmployees
     * const companyEmployee = await prisma.companyEmployee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyEmployeeCreateManyArgs>(args?: SelectSubset<T, CompanyEmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyEmployees and returns the data saved in the database.
     * @param {CompanyEmployeeCreateManyAndReturnArgs} args - Arguments to create many CompanyEmployees.
     * @example
     * // Create many CompanyEmployees
     * const companyEmployee = await prisma.companyEmployee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyEmployees and only return the `id`
     * const companyEmployeeWithIdOnly = await prisma.companyEmployee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyEmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyEmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanyEmployee.
     * @param {CompanyEmployeeDeleteArgs} args - Arguments to delete one CompanyEmployee.
     * @example
     * // Delete one CompanyEmployee
     * const CompanyEmployee = await prisma.companyEmployee.delete({
     *   where: {
     *     // ... filter to delete one CompanyEmployee
     *   }
     * })
     * 
     */
    delete<T extends CompanyEmployeeDeleteArgs>(args: SelectSubset<T, CompanyEmployeeDeleteArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanyEmployee.
     * @param {CompanyEmployeeUpdateArgs} args - Arguments to update one CompanyEmployee.
     * @example
     * // Update one CompanyEmployee
     * const companyEmployee = await prisma.companyEmployee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyEmployeeUpdateArgs>(args: SelectSubset<T, CompanyEmployeeUpdateArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanyEmployees.
     * @param {CompanyEmployeeDeleteManyArgs} args - Arguments to filter CompanyEmployees to delete.
     * @example
     * // Delete a few CompanyEmployees
     * const { count } = await prisma.companyEmployee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyEmployeeDeleteManyArgs>(args?: SelectSubset<T, CompanyEmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyEmployees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyEmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyEmployees
     * const companyEmployee = await prisma.companyEmployee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyEmployeeUpdateManyArgs>(args: SelectSubset<T, CompanyEmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyEmployees and returns the data updated in the database.
     * @param {CompanyEmployeeUpdateManyAndReturnArgs} args - Arguments to update many CompanyEmployees.
     * @example
     * // Update many CompanyEmployees
     * const companyEmployee = await prisma.companyEmployee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanyEmployees and only return the `id`
     * const companyEmployeeWithIdOnly = await prisma.companyEmployee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyEmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyEmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanyEmployee.
     * @param {CompanyEmployeeUpsertArgs} args - Arguments to update or create a CompanyEmployee.
     * @example
     * // Update or create a CompanyEmployee
     * const companyEmployee = await prisma.companyEmployee.upsert({
     *   create: {
     *     // ... data to create a CompanyEmployee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyEmployee we want to update
     *   }
     * })
     */
    upsert<T extends CompanyEmployeeUpsertArgs>(args: SelectSubset<T, CompanyEmployeeUpsertArgs<ExtArgs>>): Prisma__CompanyEmployeeClient<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanyEmployees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyEmployeeCountArgs} args - Arguments to filter CompanyEmployees to count.
     * @example
     * // Count the number of CompanyEmployees
     * const count = await prisma.companyEmployee.count({
     *   where: {
     *     // ... the filter for the CompanyEmployees we want to count
     *   }
     * })
    **/
    count<T extends CompanyEmployeeCountArgs>(
      args?: Subset<T, CompanyEmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyEmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyEmployee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyEmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyEmployeeAggregateArgs>(args: Subset<T, CompanyEmployeeAggregateArgs>): Prisma.PrismaPromise<GetCompanyEmployeeAggregateType<T>>

    /**
     * Group by CompanyEmployee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyEmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyEmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyEmployeeGroupByArgs['orderBy'] }
        : { orderBy?: CompanyEmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyEmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyEmployee model
   */
  readonly fields: CompanyEmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyEmployee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyEmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends CompanyEmployee$departmentArgs<ExtArgs> = {}>(args?: Subset<T, CompanyEmployee$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyEmployee model
   */
  interface CompanyEmployeeFieldRefs {
    readonly id: FieldRef<"CompanyEmployee", 'String'>
    readonly company_id: FieldRef<"CompanyEmployee", 'String'>
    readonly user_id: FieldRef<"CompanyEmployee", 'String'>
    readonly employee_id: FieldRef<"CompanyEmployee", 'String'>
    readonly department_id: FieldRef<"CompanyEmployee", 'String'>
    readonly designation: FieldRef<"CompanyEmployee", 'String'>
    readonly role: FieldRef<"CompanyEmployee", 'String'>
    readonly budget_limit: FieldRef<"CompanyEmployee", 'Float'>
    readonly start_date: FieldRef<"CompanyEmployee", 'DateTime'>
    readonly end_date: FieldRef<"CompanyEmployee", 'DateTime'>
    readonly salary_band: FieldRef<"CompanyEmployee", 'String'>
    readonly reporting_manager_id: FieldRef<"CompanyEmployee", 'String'>
    readonly employment_type: FieldRef<"CompanyEmployee", 'String'>
    readonly status: FieldRef<"CompanyEmployee", 'String'>
    readonly created_at: FieldRef<"CompanyEmployee", 'DateTime'>
    readonly updated_at: FieldRef<"CompanyEmployee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyEmployee findUnique
   */
  export type CompanyEmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyEmployee to fetch.
     */
    where: CompanyEmployeeWhereUniqueInput
  }

  /**
   * CompanyEmployee findUniqueOrThrow
   */
  export type CompanyEmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyEmployee to fetch.
     */
    where: CompanyEmployeeWhereUniqueInput
  }

  /**
   * CompanyEmployee findFirst
   */
  export type CompanyEmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyEmployee to fetch.
     */
    where?: CompanyEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyEmployees to fetch.
     */
    orderBy?: CompanyEmployeeOrderByWithRelationInput | CompanyEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyEmployees.
     */
    cursor?: CompanyEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyEmployees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyEmployees.
     */
    distinct?: CompanyEmployeeScalarFieldEnum | CompanyEmployeeScalarFieldEnum[]
  }

  /**
   * CompanyEmployee findFirstOrThrow
   */
  export type CompanyEmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyEmployee to fetch.
     */
    where?: CompanyEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyEmployees to fetch.
     */
    orderBy?: CompanyEmployeeOrderByWithRelationInput | CompanyEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyEmployees.
     */
    cursor?: CompanyEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyEmployees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyEmployees.
     */
    distinct?: CompanyEmployeeScalarFieldEnum | CompanyEmployeeScalarFieldEnum[]
  }

  /**
   * CompanyEmployee findMany
   */
  export type CompanyEmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which CompanyEmployees to fetch.
     */
    where?: CompanyEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyEmployees to fetch.
     */
    orderBy?: CompanyEmployeeOrderByWithRelationInput | CompanyEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyEmployees.
     */
    cursor?: CompanyEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyEmployees.
     */
    skip?: number
    distinct?: CompanyEmployeeScalarFieldEnum | CompanyEmployeeScalarFieldEnum[]
  }

  /**
   * CompanyEmployee create
   */
  export type CompanyEmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyEmployee.
     */
    data: XOR<CompanyEmployeeCreateInput, CompanyEmployeeUncheckedCreateInput>
  }

  /**
   * CompanyEmployee createMany
   */
  export type CompanyEmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyEmployees.
     */
    data: CompanyEmployeeCreateManyInput | CompanyEmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyEmployee createManyAndReturn
   */
  export type CompanyEmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many CompanyEmployees.
     */
    data: CompanyEmployeeCreateManyInput | CompanyEmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyEmployee update
   */
  export type CompanyEmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyEmployee.
     */
    data: XOR<CompanyEmployeeUpdateInput, CompanyEmployeeUncheckedUpdateInput>
    /**
     * Choose, which CompanyEmployee to update.
     */
    where: CompanyEmployeeWhereUniqueInput
  }

  /**
   * CompanyEmployee updateMany
   */
  export type CompanyEmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyEmployees.
     */
    data: XOR<CompanyEmployeeUpdateManyMutationInput, CompanyEmployeeUncheckedUpdateManyInput>
    /**
     * Filter which CompanyEmployees to update
     */
    where?: CompanyEmployeeWhereInput
    /**
     * Limit how many CompanyEmployees to update.
     */
    limit?: number
  }

  /**
   * CompanyEmployee updateManyAndReturn
   */
  export type CompanyEmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * The data used to update CompanyEmployees.
     */
    data: XOR<CompanyEmployeeUpdateManyMutationInput, CompanyEmployeeUncheckedUpdateManyInput>
    /**
     * Filter which CompanyEmployees to update
     */
    where?: CompanyEmployeeWhereInput
    /**
     * Limit how many CompanyEmployees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyEmployee upsert
   */
  export type CompanyEmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyEmployee to update in case it exists.
     */
    where: CompanyEmployeeWhereUniqueInput
    /**
     * In case the CompanyEmployee found by the `where` argument doesn't exist, create a new CompanyEmployee with this data.
     */
    create: XOR<CompanyEmployeeCreateInput, CompanyEmployeeUncheckedCreateInput>
    /**
     * In case the CompanyEmployee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyEmployeeUpdateInput, CompanyEmployeeUncheckedUpdateInput>
  }

  /**
   * CompanyEmployee delete
   */
  export type CompanyEmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    /**
     * Filter which CompanyEmployee to delete.
     */
    where: CompanyEmployeeWhereUniqueInput
  }

  /**
   * CompanyEmployee deleteMany
   */
  export type CompanyEmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyEmployees to delete
     */
    where?: CompanyEmployeeWhereInput
    /**
     * Limit how many CompanyEmployees to delete.
     */
    limit?: number
  }

  /**
   * CompanyEmployee.department
   */
  export type CompanyEmployee$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * CompanyEmployee without action
   */
  export type CompanyEmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
  }


  /**
   * Model CompanyPolicy
   */

  export type AggregateCompanyPolicy = {
    _count: CompanyPolicyCountAggregateOutputType | null
    _avg: CompanyPolicyAvgAggregateOutputType | null
    _sum: CompanyPolicySumAggregateOutputType | null
    _min: CompanyPolicyMinAggregateOutputType | null
    _max: CompanyPolicyMaxAggregateOutputType | null
  }

  export type CompanyPolicyAvgAggregateOutputType = {
    priority: number | null
    version: number | null
  }

  export type CompanyPolicySumAggregateOutputType = {
    priority: number | null
    version: number | null
  }

  export type CompanyPolicyMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    policy_type: string | null
    name: string | null
    description: string | null
    is_active: boolean | null
    priority: number | null
    effective_from: Date | null
    effective_to: Date | null
    created_by: string | null
    approved_by: string | null
    approval_date: Date | null
    version: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompanyPolicyMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    policy_type: string | null
    name: string | null
    description: string | null
    is_active: boolean | null
    priority: number | null
    effective_from: Date | null
    effective_to: Date | null
    created_by: string | null
    approved_by: string | null
    approval_date: Date | null
    version: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompanyPolicyCountAggregateOutputType = {
    id: number
    company_id: number
    policy_type: number
    name: number
    description: number
    rules: number
    is_active: number
    priority: number
    effective_from: number
    effective_to: number
    created_by: number
    approved_by: number
    approval_date: number
    version: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CompanyPolicyAvgAggregateInputType = {
    priority?: true
    version?: true
  }

  export type CompanyPolicySumAggregateInputType = {
    priority?: true
    version?: true
  }

  export type CompanyPolicyMinAggregateInputType = {
    id?: true
    company_id?: true
    policy_type?: true
    name?: true
    description?: true
    is_active?: true
    priority?: true
    effective_from?: true
    effective_to?: true
    created_by?: true
    approved_by?: true
    approval_date?: true
    version?: true
    created_at?: true
    updated_at?: true
  }

  export type CompanyPolicyMaxAggregateInputType = {
    id?: true
    company_id?: true
    policy_type?: true
    name?: true
    description?: true
    is_active?: true
    priority?: true
    effective_from?: true
    effective_to?: true
    created_by?: true
    approved_by?: true
    approval_date?: true
    version?: true
    created_at?: true
    updated_at?: true
  }

  export type CompanyPolicyCountAggregateInputType = {
    id?: true
    company_id?: true
    policy_type?: true
    name?: true
    description?: true
    rules?: true
    is_active?: true
    priority?: true
    effective_from?: true
    effective_to?: true
    created_by?: true
    approved_by?: true
    approval_date?: true
    version?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CompanyPolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyPolicy to aggregate.
     */
    where?: CompanyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyPolicies to fetch.
     */
    orderBy?: CompanyPolicyOrderByWithRelationInput | CompanyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyPolicies
    **/
    _count?: true | CompanyPolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyPolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyPolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyPolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyPolicyMaxAggregateInputType
  }

  export type GetCompanyPolicyAggregateType<T extends CompanyPolicyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyPolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyPolicy[P]>
      : GetScalarType<T[P], AggregateCompanyPolicy[P]>
  }




  export type CompanyPolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyPolicyWhereInput
    orderBy?: CompanyPolicyOrderByWithAggregationInput | CompanyPolicyOrderByWithAggregationInput[]
    by: CompanyPolicyScalarFieldEnum[] | CompanyPolicyScalarFieldEnum
    having?: CompanyPolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyPolicyCountAggregateInputType | true
    _avg?: CompanyPolicyAvgAggregateInputType
    _sum?: CompanyPolicySumAggregateInputType
    _min?: CompanyPolicyMinAggregateInputType
    _max?: CompanyPolicyMaxAggregateInputType
  }

  export type CompanyPolicyGroupByOutputType = {
    id: string
    company_id: string
    policy_type: string
    name: string
    description: string | null
    rules: JsonValue | null
    is_active: boolean
    priority: number | null
    effective_from: Date | null
    effective_to: Date | null
    created_by: string | null
    approved_by: string | null
    approval_date: Date | null
    version: number
    created_at: Date
    updated_at: Date
    _count: CompanyPolicyCountAggregateOutputType | null
    _avg: CompanyPolicyAvgAggregateOutputType | null
    _sum: CompanyPolicySumAggregateOutputType | null
    _min: CompanyPolicyMinAggregateOutputType | null
    _max: CompanyPolicyMaxAggregateOutputType | null
  }

  type GetCompanyPolicyGroupByPayload<T extends CompanyPolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyPolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyPolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyPolicyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyPolicyGroupByOutputType[P]>
        }
      >
    >


  export type CompanyPolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    policy_type?: boolean
    name?: boolean
    description?: boolean
    rules?: boolean
    is_active?: boolean
    priority?: boolean
    effective_from?: boolean
    effective_to?: boolean
    created_by?: boolean
    approved_by?: boolean
    approval_date?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyPolicy"]>

  export type CompanyPolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    policy_type?: boolean
    name?: boolean
    description?: boolean
    rules?: boolean
    is_active?: boolean
    priority?: boolean
    effective_from?: boolean
    effective_to?: boolean
    created_by?: boolean
    approved_by?: boolean
    approval_date?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyPolicy"]>

  export type CompanyPolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    policy_type?: boolean
    name?: boolean
    description?: boolean
    rules?: boolean
    is_active?: boolean
    priority?: boolean
    effective_from?: boolean
    effective_to?: boolean
    created_by?: boolean
    approved_by?: boolean
    approval_date?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyPolicy"]>

  export type CompanyPolicySelectScalar = {
    id?: boolean
    company_id?: boolean
    policy_type?: boolean
    name?: boolean
    description?: boolean
    rules?: boolean
    is_active?: boolean
    priority?: boolean
    effective_from?: boolean
    effective_to?: boolean
    created_by?: boolean
    approved_by?: boolean
    approval_date?: boolean
    version?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CompanyPolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "policy_type" | "name" | "description" | "rules" | "is_active" | "priority" | "effective_from" | "effective_to" | "created_by" | "approved_by" | "approval_date" | "version" | "created_at" | "updated_at", ExtArgs["result"]["companyPolicy"]>
  export type CompanyPolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanyPolicyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanyPolicyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $CompanyPolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyPolicy"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      policy_type: string
      name: string
      description: string | null
      rules: Prisma.JsonValue | null
      is_active: boolean
      priority: number | null
      effective_from: Date | null
      effective_to: Date | null
      created_by: string | null
      approved_by: string | null
      approval_date: Date | null
      version: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["companyPolicy"]>
    composites: {}
  }

  type CompanyPolicyGetPayload<S extends boolean | null | undefined | CompanyPolicyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPolicyPayload, S>

  type CompanyPolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyPolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyPolicyCountAggregateInputType | true
    }

  export interface CompanyPolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyPolicy'], meta: { name: 'CompanyPolicy' } }
    /**
     * Find zero or one CompanyPolicy that matches the filter.
     * @param {CompanyPolicyFindUniqueArgs} args - Arguments to find a CompanyPolicy
     * @example
     * // Get one CompanyPolicy
     * const companyPolicy = await prisma.companyPolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyPolicyFindUniqueArgs>(args: SelectSubset<T, CompanyPolicyFindUniqueArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanyPolicy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyPolicyFindUniqueOrThrowArgs} args - Arguments to find a CompanyPolicy
     * @example
     * // Get one CompanyPolicy
     * const companyPolicy = await prisma.companyPolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyPolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyPolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyPolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyPolicyFindFirstArgs} args - Arguments to find a CompanyPolicy
     * @example
     * // Get one CompanyPolicy
     * const companyPolicy = await prisma.companyPolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyPolicyFindFirstArgs>(args?: SelectSubset<T, CompanyPolicyFindFirstArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyPolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyPolicyFindFirstOrThrowArgs} args - Arguments to find a CompanyPolicy
     * @example
     * // Get one CompanyPolicy
     * const companyPolicy = await prisma.companyPolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyPolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyPolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanyPolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyPolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyPolicies
     * const companyPolicies = await prisma.companyPolicy.findMany()
     * 
     * // Get first 10 CompanyPolicies
     * const companyPolicies = await prisma.companyPolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyPolicyWithIdOnly = await prisma.companyPolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyPolicyFindManyArgs>(args?: SelectSubset<T, CompanyPolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanyPolicy.
     * @param {CompanyPolicyCreateArgs} args - Arguments to create a CompanyPolicy.
     * @example
     * // Create one CompanyPolicy
     * const CompanyPolicy = await prisma.companyPolicy.create({
     *   data: {
     *     // ... data to create a CompanyPolicy
     *   }
     * })
     * 
     */
    create<T extends CompanyPolicyCreateArgs>(args: SelectSubset<T, CompanyPolicyCreateArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanyPolicies.
     * @param {CompanyPolicyCreateManyArgs} args - Arguments to create many CompanyPolicies.
     * @example
     * // Create many CompanyPolicies
     * const companyPolicy = await prisma.companyPolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyPolicyCreateManyArgs>(args?: SelectSubset<T, CompanyPolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyPolicies and returns the data saved in the database.
     * @param {CompanyPolicyCreateManyAndReturnArgs} args - Arguments to create many CompanyPolicies.
     * @example
     * // Create many CompanyPolicies
     * const companyPolicy = await prisma.companyPolicy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyPolicies and only return the `id`
     * const companyPolicyWithIdOnly = await prisma.companyPolicy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyPolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyPolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanyPolicy.
     * @param {CompanyPolicyDeleteArgs} args - Arguments to delete one CompanyPolicy.
     * @example
     * // Delete one CompanyPolicy
     * const CompanyPolicy = await prisma.companyPolicy.delete({
     *   where: {
     *     // ... filter to delete one CompanyPolicy
     *   }
     * })
     * 
     */
    delete<T extends CompanyPolicyDeleteArgs>(args: SelectSubset<T, CompanyPolicyDeleteArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanyPolicy.
     * @param {CompanyPolicyUpdateArgs} args - Arguments to update one CompanyPolicy.
     * @example
     * // Update one CompanyPolicy
     * const companyPolicy = await prisma.companyPolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyPolicyUpdateArgs>(args: SelectSubset<T, CompanyPolicyUpdateArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanyPolicies.
     * @param {CompanyPolicyDeleteManyArgs} args - Arguments to filter CompanyPolicies to delete.
     * @example
     * // Delete a few CompanyPolicies
     * const { count } = await prisma.companyPolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyPolicyDeleteManyArgs>(args?: SelectSubset<T, CompanyPolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyPolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyPolicies
     * const companyPolicy = await prisma.companyPolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyPolicyUpdateManyArgs>(args: SelectSubset<T, CompanyPolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyPolicies and returns the data updated in the database.
     * @param {CompanyPolicyUpdateManyAndReturnArgs} args - Arguments to update many CompanyPolicies.
     * @example
     * // Update many CompanyPolicies
     * const companyPolicy = await prisma.companyPolicy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanyPolicies and only return the `id`
     * const companyPolicyWithIdOnly = await prisma.companyPolicy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyPolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyPolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanyPolicy.
     * @param {CompanyPolicyUpsertArgs} args - Arguments to update or create a CompanyPolicy.
     * @example
     * // Update or create a CompanyPolicy
     * const companyPolicy = await prisma.companyPolicy.upsert({
     *   create: {
     *     // ... data to create a CompanyPolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyPolicy we want to update
     *   }
     * })
     */
    upsert<T extends CompanyPolicyUpsertArgs>(args: SelectSubset<T, CompanyPolicyUpsertArgs<ExtArgs>>): Prisma__CompanyPolicyClient<$Result.GetResult<Prisma.$CompanyPolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanyPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyPolicyCountArgs} args - Arguments to filter CompanyPolicies to count.
     * @example
     * // Count the number of CompanyPolicies
     * const count = await prisma.companyPolicy.count({
     *   where: {
     *     // ... the filter for the CompanyPolicies we want to count
     *   }
     * })
    **/
    count<T extends CompanyPolicyCountArgs>(
      args?: Subset<T, CompanyPolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyPolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyPolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyPolicyAggregateArgs>(args: Subset<T, CompanyPolicyAggregateArgs>): Prisma.PrismaPromise<GetCompanyPolicyAggregateType<T>>

    /**
     * Group by CompanyPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyPolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyPolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyPolicyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyPolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyPolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyPolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyPolicy model
   */
  readonly fields: CompanyPolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyPolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyPolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyPolicy model
   */
  interface CompanyPolicyFieldRefs {
    readonly id: FieldRef<"CompanyPolicy", 'String'>
    readonly company_id: FieldRef<"CompanyPolicy", 'String'>
    readonly policy_type: FieldRef<"CompanyPolicy", 'String'>
    readonly name: FieldRef<"CompanyPolicy", 'String'>
    readonly description: FieldRef<"CompanyPolicy", 'String'>
    readonly rules: FieldRef<"CompanyPolicy", 'Json'>
    readonly is_active: FieldRef<"CompanyPolicy", 'Boolean'>
    readonly priority: FieldRef<"CompanyPolicy", 'Int'>
    readonly effective_from: FieldRef<"CompanyPolicy", 'DateTime'>
    readonly effective_to: FieldRef<"CompanyPolicy", 'DateTime'>
    readonly created_by: FieldRef<"CompanyPolicy", 'String'>
    readonly approved_by: FieldRef<"CompanyPolicy", 'String'>
    readonly approval_date: FieldRef<"CompanyPolicy", 'DateTime'>
    readonly version: FieldRef<"CompanyPolicy", 'Int'>
    readonly created_at: FieldRef<"CompanyPolicy", 'DateTime'>
    readonly updated_at: FieldRef<"CompanyPolicy", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyPolicy findUnique
   */
  export type CompanyPolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which CompanyPolicy to fetch.
     */
    where: CompanyPolicyWhereUniqueInput
  }

  /**
   * CompanyPolicy findUniqueOrThrow
   */
  export type CompanyPolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which CompanyPolicy to fetch.
     */
    where: CompanyPolicyWhereUniqueInput
  }

  /**
   * CompanyPolicy findFirst
   */
  export type CompanyPolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which CompanyPolicy to fetch.
     */
    where?: CompanyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyPolicies to fetch.
     */
    orderBy?: CompanyPolicyOrderByWithRelationInput | CompanyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyPolicies.
     */
    cursor?: CompanyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyPolicies.
     */
    distinct?: CompanyPolicyScalarFieldEnum | CompanyPolicyScalarFieldEnum[]
  }

  /**
   * CompanyPolicy findFirstOrThrow
   */
  export type CompanyPolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which CompanyPolicy to fetch.
     */
    where?: CompanyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyPolicies to fetch.
     */
    orderBy?: CompanyPolicyOrderByWithRelationInput | CompanyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyPolicies.
     */
    cursor?: CompanyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyPolicies.
     */
    distinct?: CompanyPolicyScalarFieldEnum | CompanyPolicyScalarFieldEnum[]
  }

  /**
   * CompanyPolicy findMany
   */
  export type CompanyPolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which CompanyPolicies to fetch.
     */
    where?: CompanyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyPolicies to fetch.
     */
    orderBy?: CompanyPolicyOrderByWithRelationInput | CompanyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyPolicies.
     */
    cursor?: CompanyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyPolicies.
     */
    skip?: number
    distinct?: CompanyPolicyScalarFieldEnum | CompanyPolicyScalarFieldEnum[]
  }

  /**
   * CompanyPolicy create
   */
  export type CompanyPolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyPolicy.
     */
    data: XOR<CompanyPolicyCreateInput, CompanyPolicyUncheckedCreateInput>
  }

  /**
   * CompanyPolicy createMany
   */
  export type CompanyPolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyPolicies.
     */
    data: CompanyPolicyCreateManyInput | CompanyPolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyPolicy createManyAndReturn
   */
  export type CompanyPolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * The data used to create many CompanyPolicies.
     */
    data: CompanyPolicyCreateManyInput | CompanyPolicyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyPolicy update
   */
  export type CompanyPolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyPolicy.
     */
    data: XOR<CompanyPolicyUpdateInput, CompanyPolicyUncheckedUpdateInput>
    /**
     * Choose, which CompanyPolicy to update.
     */
    where: CompanyPolicyWhereUniqueInput
  }

  /**
   * CompanyPolicy updateMany
   */
  export type CompanyPolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyPolicies.
     */
    data: XOR<CompanyPolicyUpdateManyMutationInput, CompanyPolicyUncheckedUpdateManyInput>
    /**
     * Filter which CompanyPolicies to update
     */
    where?: CompanyPolicyWhereInput
    /**
     * Limit how many CompanyPolicies to update.
     */
    limit?: number
  }

  /**
   * CompanyPolicy updateManyAndReturn
   */
  export type CompanyPolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * The data used to update CompanyPolicies.
     */
    data: XOR<CompanyPolicyUpdateManyMutationInput, CompanyPolicyUncheckedUpdateManyInput>
    /**
     * Filter which CompanyPolicies to update
     */
    where?: CompanyPolicyWhereInput
    /**
     * Limit how many CompanyPolicies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyPolicy upsert
   */
  export type CompanyPolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyPolicy to update in case it exists.
     */
    where: CompanyPolicyWhereUniqueInput
    /**
     * In case the CompanyPolicy found by the `where` argument doesn't exist, create a new CompanyPolicy with this data.
     */
    create: XOR<CompanyPolicyCreateInput, CompanyPolicyUncheckedCreateInput>
    /**
     * In case the CompanyPolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyPolicyUpdateInput, CompanyPolicyUncheckedUpdateInput>
  }

  /**
   * CompanyPolicy delete
   */
  export type CompanyPolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
    /**
     * Filter which CompanyPolicy to delete.
     */
    where: CompanyPolicyWhereUniqueInput
  }

  /**
   * CompanyPolicy deleteMany
   */
  export type CompanyPolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyPolicies to delete
     */
    where?: CompanyPolicyWhereInput
    /**
     * Limit how many CompanyPolicies to delete.
     */
    limit?: number
  }

  /**
   * CompanyPolicy without action
   */
  export type CompanyPolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyPolicy
     */
    select?: CompanyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyPolicy
     */
    omit?: CompanyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyPolicyInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    budget_allocated: number | null
    budget_used: number | null
    level: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    budget_allocated: number | null
    budget_used: number | null
    level: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    name: string | null
    description: string | null
    code: string | null
    cost_center: string | null
    budget_allocated: number | null
    budget_used: number | null
    manager_id: string | null
    parent_id: string | null
    level: number | null
    path: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    name: string | null
    description: string | null
    code: string | null
    cost_center: string | null
    budget_allocated: number | null
    budget_used: number | null
    manager_id: string | null
    parent_id: string | null
    level: number | null
    path: string | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    company_id: number
    name: number
    description: number
    code: number
    cost_center: number
    budget_allocated: number
    budget_used: number
    manager_id: number
    parent_id: number
    level: number
    path: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    budget_allocated?: true
    budget_used?: true
    level?: true
  }

  export type DepartmentSumAggregateInputType = {
    budget_allocated?: true
    budget_used?: true
    level?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    company_id?: true
    name?: true
    description?: true
    code?: true
    cost_center?: true
    budget_allocated?: true
    budget_used?: true
    manager_id?: true
    parent_id?: true
    level?: true
    path?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    company_id?: true
    name?: true
    description?: true
    code?: true
    cost_center?: true
    budget_allocated?: true
    budget_used?: true
    manager_id?: true
    parent_id?: true
    level?: true
    path?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    company_id?: true
    name?: true
    description?: true
    code?: true
    cost_center?: true
    budget_allocated?: true
    budget_used?: true
    manager_id?: true
    parent_id?: true
    level?: true
    path?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    company_id: string
    name: string
    description: string | null
    code: string
    cost_center: string | null
    budget_allocated: number | null
    budget_used: number | null
    manager_id: string | null
    parent_id: string | null
    level: number | null
    path: string | null
    is_active: boolean
    created_at: Date
    updated_at: Date
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    cost_center?: boolean
    budget_allocated?: boolean
    budget_used?: boolean
    manager_id?: boolean
    parent_id?: boolean
    level?: boolean
    path?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employees?: boolean | Department$employeesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    cost_center?: boolean
    budget_allocated?: boolean
    budget_used?: boolean
    manager_id?: boolean
    parent_id?: boolean
    level?: boolean
    path?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    cost_center?: boolean
    budget_allocated?: boolean
    budget_used?: boolean
    manager_id?: boolean
    parent_id?: boolean
    level?: boolean
    path?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    company_id?: boolean
    name?: boolean
    description?: boolean
    code?: boolean
    cost_center?: boolean
    budget_allocated?: boolean
    budget_used?: boolean
    manager_id?: boolean
    parent_id?: boolean
    level?: boolean
    path?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "name" | "description" | "code" | "cost_center" | "budget_allocated" | "budget_used" | "manager_id" | "parent_id" | "level" | "path" | "is_active" | "created_at" | "updated_at", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    employees?: boolean | Department$employeesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      employees: Prisma.$CompanyEmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      name: string
      description: string | null
      code: string
      cost_center: string | null
      budget_allocated: number | null
      budget_used: number | null
      manager_id: string | null
      parent_id: string | null
      level: number | null
      path: string | null
      is_active: boolean
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employees<T extends Department$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Department$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyEmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly company_id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly cost_center: FieldRef<"Department", 'String'>
    readonly budget_allocated: FieldRef<"Department", 'Float'>
    readonly budget_used: FieldRef<"Department", 'Float'>
    readonly manager_id: FieldRef<"Department", 'String'>
    readonly parent_id: FieldRef<"Department", 'String'>
    readonly level: FieldRef<"Department", 'Int'>
    readonly path: FieldRef<"Department", 'String'>
    readonly is_active: FieldRef<"Department", 'Boolean'>
    readonly created_at: FieldRef<"Department", 'DateTime'>
    readonly updated_at: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.employees
   */
  export type Department$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyEmployee
     */
    select?: CompanyEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyEmployee
     */
    omit?: CompanyEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyEmployeeInclude<ExtArgs> | null
    where?: CompanyEmployeeWhereInput
    orderBy?: CompanyEmployeeOrderByWithRelationInput | CompanyEmployeeOrderByWithRelationInput[]
    cursor?: CompanyEmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyEmployeeScalarFieldEnum | CompanyEmployeeScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model CompanySetting
   */

  export type AggregateCompanySetting = {
    _count: CompanySettingCountAggregateOutputType | null
    _min: CompanySettingMinAggregateOutputType | null
    _max: CompanySettingMaxAggregateOutputType | null
  }

  export type CompanySettingMinAggregateOutputType = {
    id: string | null
    company_id: string | null
    category: string | null
    key: string | null
    data_type: string | null
    is_encrypted: boolean | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompanySettingMaxAggregateOutputType = {
    id: string | null
    company_id: string | null
    category: string | null
    key: string | null
    data_type: string | null
    is_encrypted: boolean | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompanySettingCountAggregateOutputType = {
    id: number
    company_id: number
    category: number
    key: number
    value: number
    data_type: number
    is_encrypted: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CompanySettingMinAggregateInputType = {
    id?: true
    company_id?: true
    category?: true
    key?: true
    data_type?: true
    is_encrypted?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type CompanySettingMaxAggregateInputType = {
    id?: true
    company_id?: true
    category?: true
    key?: true
    data_type?: true
    is_encrypted?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type CompanySettingCountAggregateInputType = {
    id?: true
    company_id?: true
    category?: true
    key?: true
    value?: true
    data_type?: true
    is_encrypted?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CompanySettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanySetting to aggregate.
     */
    where?: CompanySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingOrderByWithRelationInput | CompanySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanySettings
    **/
    _count?: true | CompanySettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanySettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanySettingMaxAggregateInputType
  }

  export type GetCompanySettingAggregateType<T extends CompanySettingAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanySetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanySetting[P]>
      : GetScalarType<T[P], AggregateCompanySetting[P]>
  }




  export type CompanySettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanySettingWhereInput
    orderBy?: CompanySettingOrderByWithAggregationInput | CompanySettingOrderByWithAggregationInput[]
    by: CompanySettingScalarFieldEnum[] | CompanySettingScalarFieldEnum
    having?: CompanySettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanySettingCountAggregateInputType | true
    _min?: CompanySettingMinAggregateInputType
    _max?: CompanySettingMaxAggregateInputType
  }

  export type CompanySettingGroupByOutputType = {
    id: string
    company_id: string
    category: string
    key: string
    value: JsonValue | null
    data_type: string
    is_encrypted: boolean
    description: string | null
    created_at: Date
    updated_at: Date
    _count: CompanySettingCountAggregateOutputType | null
    _min: CompanySettingMinAggregateOutputType | null
    _max: CompanySettingMaxAggregateOutputType | null
  }

  type GetCompanySettingGroupByPayload<T extends CompanySettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanySettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanySettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanySettingGroupByOutputType[P]>
            : GetScalarType<T[P], CompanySettingGroupByOutputType[P]>
        }
      >
    >


  export type CompanySettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    category?: boolean
    key?: boolean
    value?: boolean
    data_type?: boolean
    is_encrypted?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companySetting"]>

  export type CompanySettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    category?: boolean
    key?: boolean
    value?: boolean
    data_type?: boolean
    is_encrypted?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companySetting"]>

  export type CompanySettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    category?: boolean
    key?: boolean
    value?: boolean
    data_type?: boolean
    is_encrypted?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companySetting"]>

  export type CompanySettingSelectScalar = {
    id?: boolean
    company_id?: boolean
    category?: boolean
    key?: boolean
    value?: boolean
    data_type?: boolean
    is_encrypted?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CompanySettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "company_id" | "category" | "key" | "value" | "data_type" | "is_encrypted" | "description" | "created_at" | "updated_at", ExtArgs["result"]["companySetting"]>
  export type CompanySettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanySettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanySettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $CompanySettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanySetting"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      company_id: string
      category: string
      key: string
      value: Prisma.JsonValue | null
      data_type: string
      is_encrypted: boolean
      description: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["companySetting"]>
    composites: {}
  }

  type CompanySettingGetPayload<S extends boolean | null | undefined | CompanySettingDefaultArgs> = $Result.GetResult<Prisma.$CompanySettingPayload, S>

  type CompanySettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanySettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanySettingCountAggregateInputType | true
    }

  export interface CompanySettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanySetting'], meta: { name: 'CompanySetting' } }
    /**
     * Find zero or one CompanySetting that matches the filter.
     * @param {CompanySettingFindUniqueArgs} args - Arguments to find a CompanySetting
     * @example
     * // Get one CompanySetting
     * const companySetting = await prisma.companySetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanySettingFindUniqueArgs>(args: SelectSubset<T, CompanySettingFindUniqueArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanySetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanySettingFindUniqueOrThrowArgs} args - Arguments to find a CompanySetting
     * @example
     * // Get one CompanySetting
     * const companySetting = await prisma.companySetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanySettingFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanySettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanySetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingFindFirstArgs} args - Arguments to find a CompanySetting
     * @example
     * // Get one CompanySetting
     * const companySetting = await prisma.companySetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanySettingFindFirstArgs>(args?: SelectSubset<T, CompanySettingFindFirstArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanySetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingFindFirstOrThrowArgs} args - Arguments to find a CompanySetting
     * @example
     * // Get one CompanySetting
     * const companySetting = await prisma.companySetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanySettingFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanySettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanySettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanySettings
     * const companySettings = await prisma.companySetting.findMany()
     * 
     * // Get first 10 CompanySettings
     * const companySettings = await prisma.companySetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companySettingWithIdOnly = await prisma.companySetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanySettingFindManyArgs>(args?: SelectSubset<T, CompanySettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanySetting.
     * @param {CompanySettingCreateArgs} args - Arguments to create a CompanySetting.
     * @example
     * // Create one CompanySetting
     * const CompanySetting = await prisma.companySetting.create({
     *   data: {
     *     // ... data to create a CompanySetting
     *   }
     * })
     * 
     */
    create<T extends CompanySettingCreateArgs>(args: SelectSubset<T, CompanySettingCreateArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanySettings.
     * @param {CompanySettingCreateManyArgs} args - Arguments to create many CompanySettings.
     * @example
     * // Create many CompanySettings
     * const companySetting = await prisma.companySetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanySettingCreateManyArgs>(args?: SelectSubset<T, CompanySettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanySettings and returns the data saved in the database.
     * @param {CompanySettingCreateManyAndReturnArgs} args - Arguments to create many CompanySettings.
     * @example
     * // Create many CompanySettings
     * const companySetting = await prisma.companySetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanySettings and only return the `id`
     * const companySettingWithIdOnly = await prisma.companySetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanySettingCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanySettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanySetting.
     * @param {CompanySettingDeleteArgs} args - Arguments to delete one CompanySetting.
     * @example
     * // Delete one CompanySetting
     * const CompanySetting = await prisma.companySetting.delete({
     *   where: {
     *     // ... filter to delete one CompanySetting
     *   }
     * })
     * 
     */
    delete<T extends CompanySettingDeleteArgs>(args: SelectSubset<T, CompanySettingDeleteArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanySetting.
     * @param {CompanySettingUpdateArgs} args - Arguments to update one CompanySetting.
     * @example
     * // Update one CompanySetting
     * const companySetting = await prisma.companySetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanySettingUpdateArgs>(args: SelectSubset<T, CompanySettingUpdateArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanySettings.
     * @param {CompanySettingDeleteManyArgs} args - Arguments to filter CompanySettings to delete.
     * @example
     * // Delete a few CompanySettings
     * const { count } = await prisma.companySetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanySettingDeleteManyArgs>(args?: SelectSubset<T, CompanySettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanySettings
     * const companySetting = await prisma.companySetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanySettingUpdateManyArgs>(args: SelectSubset<T, CompanySettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanySettings and returns the data updated in the database.
     * @param {CompanySettingUpdateManyAndReturnArgs} args - Arguments to update many CompanySettings.
     * @example
     * // Update many CompanySettings
     * const companySetting = await prisma.companySetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanySettings and only return the `id`
     * const companySettingWithIdOnly = await prisma.companySetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanySettingUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanySettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanySetting.
     * @param {CompanySettingUpsertArgs} args - Arguments to update or create a CompanySetting.
     * @example
     * // Update or create a CompanySetting
     * const companySetting = await prisma.companySetting.upsert({
     *   create: {
     *     // ... data to create a CompanySetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanySetting we want to update
     *   }
     * })
     */
    upsert<T extends CompanySettingUpsertArgs>(args: SelectSubset<T, CompanySettingUpsertArgs<ExtArgs>>): Prisma__CompanySettingClient<$Result.GetResult<Prisma.$CompanySettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingCountArgs} args - Arguments to filter CompanySettings to count.
     * @example
     * // Count the number of CompanySettings
     * const count = await prisma.companySetting.count({
     *   where: {
     *     // ... the filter for the CompanySettings we want to count
     *   }
     * })
    **/
    count<T extends CompanySettingCountArgs>(
      args?: Subset<T, CompanySettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanySettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanySetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanySettingAggregateArgs>(args: Subset<T, CompanySettingAggregateArgs>): Prisma.PrismaPromise<GetCompanySettingAggregateType<T>>

    /**
     * Group by CompanySetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanySettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanySettingGroupByArgs['orderBy'] }
        : { orderBy?: CompanySettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanySettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanySettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanySetting model
   */
  readonly fields: CompanySettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanySetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanySettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanySetting model
   */
  interface CompanySettingFieldRefs {
    readonly id: FieldRef<"CompanySetting", 'String'>
    readonly company_id: FieldRef<"CompanySetting", 'String'>
    readonly category: FieldRef<"CompanySetting", 'String'>
    readonly key: FieldRef<"CompanySetting", 'String'>
    readonly value: FieldRef<"CompanySetting", 'Json'>
    readonly data_type: FieldRef<"CompanySetting", 'String'>
    readonly is_encrypted: FieldRef<"CompanySetting", 'Boolean'>
    readonly description: FieldRef<"CompanySetting", 'String'>
    readonly created_at: FieldRef<"CompanySetting", 'DateTime'>
    readonly updated_at: FieldRef<"CompanySetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanySetting findUnique
   */
  export type CompanySettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * Filter, which CompanySetting to fetch.
     */
    where: CompanySettingWhereUniqueInput
  }

  /**
   * CompanySetting findUniqueOrThrow
   */
  export type CompanySettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * Filter, which CompanySetting to fetch.
     */
    where: CompanySettingWhereUniqueInput
  }

  /**
   * CompanySetting findFirst
   */
  export type CompanySettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * Filter, which CompanySetting to fetch.
     */
    where?: CompanySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingOrderByWithRelationInput | CompanySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanySettings.
     */
    cursor?: CompanySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanySettings.
     */
    distinct?: CompanySettingScalarFieldEnum | CompanySettingScalarFieldEnum[]
  }

  /**
   * CompanySetting findFirstOrThrow
   */
  export type CompanySettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * Filter, which CompanySetting to fetch.
     */
    where?: CompanySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingOrderByWithRelationInput | CompanySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanySettings.
     */
    cursor?: CompanySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanySettings.
     */
    distinct?: CompanySettingScalarFieldEnum | CompanySettingScalarFieldEnum[]
  }

  /**
   * CompanySetting findMany
   */
  export type CompanySettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * Filter, which CompanySettings to fetch.
     */
    where?: CompanySettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingOrderByWithRelationInput | CompanySettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanySettings.
     */
    cursor?: CompanySettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    distinct?: CompanySettingScalarFieldEnum | CompanySettingScalarFieldEnum[]
  }

  /**
   * CompanySetting create
   */
  export type CompanySettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanySetting.
     */
    data: XOR<CompanySettingCreateInput, CompanySettingUncheckedCreateInput>
  }

  /**
   * CompanySetting createMany
   */
  export type CompanySettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanySettings.
     */
    data: CompanySettingCreateManyInput | CompanySettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanySetting createManyAndReturn
   */
  export type CompanySettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * The data used to create many CompanySettings.
     */
    data: CompanySettingCreateManyInput | CompanySettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanySetting update
   */
  export type CompanySettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanySetting.
     */
    data: XOR<CompanySettingUpdateInput, CompanySettingUncheckedUpdateInput>
    /**
     * Choose, which CompanySetting to update.
     */
    where: CompanySettingWhereUniqueInput
  }

  /**
   * CompanySetting updateMany
   */
  export type CompanySettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanySettings.
     */
    data: XOR<CompanySettingUpdateManyMutationInput, CompanySettingUncheckedUpdateManyInput>
    /**
     * Filter which CompanySettings to update
     */
    where?: CompanySettingWhereInput
    /**
     * Limit how many CompanySettings to update.
     */
    limit?: number
  }

  /**
   * CompanySetting updateManyAndReturn
   */
  export type CompanySettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * The data used to update CompanySettings.
     */
    data: XOR<CompanySettingUpdateManyMutationInput, CompanySettingUncheckedUpdateManyInput>
    /**
     * Filter which CompanySettings to update
     */
    where?: CompanySettingWhereInput
    /**
     * Limit how many CompanySettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanySetting upsert
   */
  export type CompanySettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanySetting to update in case it exists.
     */
    where: CompanySettingWhereUniqueInput
    /**
     * In case the CompanySetting found by the `where` argument doesn't exist, create a new CompanySetting with this data.
     */
    create: XOR<CompanySettingCreateInput, CompanySettingUncheckedCreateInput>
    /**
     * In case the CompanySetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanySettingUpdateInput, CompanySettingUncheckedUpdateInput>
  }

  /**
   * CompanySetting delete
   */
  export type CompanySettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
    /**
     * Filter which CompanySetting to delete.
     */
    where: CompanySettingWhereUniqueInput
  }

  /**
   * CompanySetting deleteMany
   */
  export type CompanySettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanySettings to delete
     */
    where?: CompanySettingWhereInput
    /**
     * Limit how many CompanySettings to delete.
     */
    limit?: number
  }

  /**
   * CompanySetting without action
   */
  export type CompanySettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySetting
     */
    select?: CompanySettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySetting
     */
    omit?: CompanySettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    registration_number: 'registration_number',
    email: 'email',
    phone: 'phone',
    website: 'website',
    industry: 'industry',
    address: 'address',
    logo_url: 'logo_url',
    status: 'status',
    subscription_tier: 'subscription_tier',
    billing_info: 'billing_info',
    settings: 'settings',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by: 'created_by',
    updated_by: 'updated_by',
    version: 'version'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const CompanyEmployeeScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    user_id: 'user_id',
    employee_id: 'employee_id',
    department_id: 'department_id',
    designation: 'designation',
    role: 'role',
    budget_limit: 'budget_limit',
    start_date: 'start_date',
    end_date: 'end_date',
    salary_band: 'salary_band',
    reporting_manager_id: 'reporting_manager_id',
    employment_type: 'employment_type',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CompanyEmployeeScalarFieldEnum = (typeof CompanyEmployeeScalarFieldEnum)[keyof typeof CompanyEmployeeScalarFieldEnum]


  export const CompanyPolicyScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    policy_type: 'policy_type',
    name: 'name',
    description: 'description',
    rules: 'rules',
    is_active: 'is_active',
    priority: 'priority',
    effective_from: 'effective_from',
    effective_to: 'effective_to',
    created_by: 'created_by',
    approved_by: 'approved_by',
    approval_date: 'approval_date',
    version: 'version',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CompanyPolicyScalarFieldEnum = (typeof CompanyPolicyScalarFieldEnum)[keyof typeof CompanyPolicyScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    name: 'name',
    description: 'description',
    code: 'code',
    cost_center: 'cost_center',
    budget_allocated: 'budget_allocated',
    budget_used: 'budget_used',
    manager_id: 'manager_id',
    parent_id: 'parent_id',
    level: 'level',
    path: 'path',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const CompanySettingScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    category: 'category',
    key: 'key',
    value: 'value',
    data_type: 'data_type',
    is_encrypted: 'is_encrypted',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CompanySettingScalarFieldEnum = (typeof CompanySettingScalarFieldEnum)[keyof typeof CompanySettingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    registration_number?: StringFilter<"Company"> | string
    email?: StringFilter<"Company"> | string
    phone?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    industry?: StringNullableFilter<"Company"> | string | null
    address?: JsonNullableFilter<"Company">
    logo_url?: StringNullableFilter<"Company"> | string | null
    status?: StringFilter<"Company"> | string
    subscription_tier?: StringFilter<"Company"> | string
    billing_info?: JsonNullableFilter<"Company">
    settings?: JsonNullableFilter<"Company">
    created_at?: DateTimeFilter<"Company"> | Date | string
    updated_at?: DateTimeFilter<"Company"> | Date | string
    created_by?: StringNullableFilter<"Company"> | string | null
    updated_by?: StringNullableFilter<"Company"> | string | null
    version?: IntFilter<"Company"> | number
    employees?: CompanyEmployeeListRelationFilter
    departments?: DepartmentListRelationFilter
    policies?: CompanyPolicyListRelationFilter
    CompanySetting?: CompanySettingListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    registration_number?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    logo_url?: SortOrderInput | SortOrder
    status?: SortOrder
    subscription_tier?: SortOrder
    billing_info?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    version?: SortOrder
    employees?: CompanyEmployeeOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    policies?: CompanyPolicyOrderByRelationAggregateInput
    CompanySetting?: CompanySettingOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    registration_number?: string
    email?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    phone?: StringNullableFilter<"Company"> | string | null
    website?: StringNullableFilter<"Company"> | string | null
    industry?: StringNullableFilter<"Company"> | string | null
    address?: JsonNullableFilter<"Company">
    logo_url?: StringNullableFilter<"Company"> | string | null
    status?: StringFilter<"Company"> | string
    subscription_tier?: StringFilter<"Company"> | string
    billing_info?: JsonNullableFilter<"Company">
    settings?: JsonNullableFilter<"Company">
    created_at?: DateTimeFilter<"Company"> | Date | string
    updated_at?: DateTimeFilter<"Company"> | Date | string
    created_by?: StringNullableFilter<"Company"> | string | null
    updated_by?: StringNullableFilter<"Company"> | string | null
    version?: IntFilter<"Company"> | number
    employees?: CompanyEmployeeListRelationFilter
    departments?: DepartmentListRelationFilter
    policies?: CompanyPolicyListRelationFilter
    CompanySetting?: CompanySettingListRelationFilter
  }, "id" | "registration_number" | "email">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    registration_number?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    logo_url?: SortOrderInput | SortOrder
    status?: SortOrder
    subscription_tier?: SortOrder
    billing_info?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    version?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    registration_number?: StringWithAggregatesFilter<"Company"> | string
    email?: StringWithAggregatesFilter<"Company"> | string
    phone?: StringNullableWithAggregatesFilter<"Company"> | string | null
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    industry?: StringNullableWithAggregatesFilter<"Company"> | string | null
    address?: JsonNullableWithAggregatesFilter<"Company">
    logo_url?: StringNullableWithAggregatesFilter<"Company"> | string | null
    status?: StringWithAggregatesFilter<"Company"> | string
    subscription_tier?: StringWithAggregatesFilter<"Company"> | string
    billing_info?: JsonNullableWithAggregatesFilter<"Company">
    settings?: JsonNullableWithAggregatesFilter<"Company">
    created_at?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    created_by?: StringNullableWithAggregatesFilter<"Company"> | string | null
    updated_by?: StringNullableWithAggregatesFilter<"Company"> | string | null
    version?: IntWithAggregatesFilter<"Company"> | number
  }

  export type CompanyEmployeeWhereInput = {
    AND?: CompanyEmployeeWhereInput | CompanyEmployeeWhereInput[]
    OR?: CompanyEmployeeWhereInput[]
    NOT?: CompanyEmployeeWhereInput | CompanyEmployeeWhereInput[]
    id?: StringFilter<"CompanyEmployee"> | string
    company_id?: StringFilter<"CompanyEmployee"> | string
    user_id?: StringFilter<"CompanyEmployee"> | string
    employee_id?: StringFilter<"CompanyEmployee"> | string
    department_id?: StringNullableFilter<"CompanyEmployee"> | string | null
    designation?: StringNullableFilter<"CompanyEmployee"> | string | null
    role?: StringFilter<"CompanyEmployee"> | string
    budget_limit?: FloatNullableFilter<"CompanyEmployee"> | number | null
    start_date?: DateTimeNullableFilter<"CompanyEmployee"> | Date | string | null
    end_date?: DateTimeNullableFilter<"CompanyEmployee"> | Date | string | null
    salary_band?: StringNullableFilter<"CompanyEmployee"> | string | null
    reporting_manager_id?: StringNullableFilter<"CompanyEmployee"> | string | null
    employment_type?: StringNullableFilter<"CompanyEmployee"> | string | null
    status?: StringFilter<"CompanyEmployee"> | string
    created_at?: DateTimeFilter<"CompanyEmployee"> | Date | string
    updated_at?: DateTimeFilter<"CompanyEmployee"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
  }

  export type CompanyEmployeeOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    user_id?: SortOrder
    employee_id?: SortOrder
    department_id?: SortOrderInput | SortOrder
    designation?: SortOrderInput | SortOrder
    role?: SortOrder
    budget_limit?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    salary_band?: SortOrderInput | SortOrder
    reporting_manager_id?: SortOrderInput | SortOrder
    employment_type?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    company?: CompanyOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type CompanyEmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    company_id_employee_id?: CompanyEmployeeCompany_idEmployee_idCompoundUniqueInput
    AND?: CompanyEmployeeWhereInput | CompanyEmployeeWhereInput[]
    OR?: CompanyEmployeeWhereInput[]
    NOT?: CompanyEmployeeWhereInput | CompanyEmployeeWhereInput[]
    company_id?: StringFilter<"CompanyEmployee"> | string
    user_id?: StringFilter<"CompanyEmployee"> | string
    employee_id?: StringFilter<"CompanyEmployee"> | string
    department_id?: StringNullableFilter<"CompanyEmployee"> | string | null
    designation?: StringNullableFilter<"CompanyEmployee"> | string | null
    role?: StringFilter<"CompanyEmployee"> | string
    budget_limit?: FloatNullableFilter<"CompanyEmployee"> | number | null
    start_date?: DateTimeNullableFilter<"CompanyEmployee"> | Date | string | null
    end_date?: DateTimeNullableFilter<"CompanyEmployee"> | Date | string | null
    salary_band?: StringNullableFilter<"CompanyEmployee"> | string | null
    reporting_manager_id?: StringNullableFilter<"CompanyEmployee"> | string | null
    employment_type?: StringNullableFilter<"CompanyEmployee"> | string | null
    status?: StringFilter<"CompanyEmployee"> | string
    created_at?: DateTimeFilter<"CompanyEmployee"> | Date | string
    updated_at?: DateTimeFilter<"CompanyEmployee"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
  }, "id" | "company_id_employee_id">

  export type CompanyEmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    user_id?: SortOrder
    employee_id?: SortOrder
    department_id?: SortOrderInput | SortOrder
    designation?: SortOrderInput | SortOrder
    role?: SortOrder
    budget_limit?: SortOrderInput | SortOrder
    start_date?: SortOrderInput | SortOrder
    end_date?: SortOrderInput | SortOrder
    salary_band?: SortOrderInput | SortOrder
    reporting_manager_id?: SortOrderInput | SortOrder
    employment_type?: SortOrderInput | SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CompanyEmployeeCountOrderByAggregateInput
    _avg?: CompanyEmployeeAvgOrderByAggregateInput
    _max?: CompanyEmployeeMaxOrderByAggregateInput
    _min?: CompanyEmployeeMinOrderByAggregateInput
    _sum?: CompanyEmployeeSumOrderByAggregateInput
  }

  export type CompanyEmployeeScalarWhereWithAggregatesInput = {
    AND?: CompanyEmployeeScalarWhereWithAggregatesInput | CompanyEmployeeScalarWhereWithAggregatesInput[]
    OR?: CompanyEmployeeScalarWhereWithAggregatesInput[]
    NOT?: CompanyEmployeeScalarWhereWithAggregatesInput | CompanyEmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyEmployee"> | string
    company_id?: StringWithAggregatesFilter<"CompanyEmployee"> | string
    user_id?: StringWithAggregatesFilter<"CompanyEmployee"> | string
    employee_id?: StringWithAggregatesFilter<"CompanyEmployee"> | string
    department_id?: StringNullableWithAggregatesFilter<"CompanyEmployee"> | string | null
    designation?: StringNullableWithAggregatesFilter<"CompanyEmployee"> | string | null
    role?: StringWithAggregatesFilter<"CompanyEmployee"> | string
    budget_limit?: FloatNullableWithAggregatesFilter<"CompanyEmployee"> | number | null
    start_date?: DateTimeNullableWithAggregatesFilter<"CompanyEmployee"> | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter<"CompanyEmployee"> | Date | string | null
    salary_band?: StringNullableWithAggregatesFilter<"CompanyEmployee"> | string | null
    reporting_manager_id?: StringNullableWithAggregatesFilter<"CompanyEmployee"> | string | null
    employment_type?: StringNullableWithAggregatesFilter<"CompanyEmployee"> | string | null
    status?: StringWithAggregatesFilter<"CompanyEmployee"> | string
    created_at?: DateTimeWithAggregatesFilter<"CompanyEmployee"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CompanyEmployee"> | Date | string
  }

  export type CompanyPolicyWhereInput = {
    AND?: CompanyPolicyWhereInput | CompanyPolicyWhereInput[]
    OR?: CompanyPolicyWhereInput[]
    NOT?: CompanyPolicyWhereInput | CompanyPolicyWhereInput[]
    id?: StringFilter<"CompanyPolicy"> | string
    company_id?: StringFilter<"CompanyPolicy"> | string
    policy_type?: StringFilter<"CompanyPolicy"> | string
    name?: StringFilter<"CompanyPolicy"> | string
    description?: StringNullableFilter<"CompanyPolicy"> | string | null
    rules?: JsonNullableFilter<"CompanyPolicy">
    is_active?: BoolFilter<"CompanyPolicy"> | boolean
    priority?: IntNullableFilter<"CompanyPolicy"> | number | null
    effective_from?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    effective_to?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    created_by?: StringNullableFilter<"CompanyPolicy"> | string | null
    approved_by?: StringNullableFilter<"CompanyPolicy"> | string | null
    approval_date?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    version?: IntFilter<"CompanyPolicy"> | number
    created_at?: DateTimeFilter<"CompanyPolicy"> | Date | string
    updated_at?: DateTimeFilter<"CompanyPolicy"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type CompanyPolicyOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    policy_type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    rules?: SortOrderInput | SortOrder
    is_active?: SortOrder
    priority?: SortOrderInput | SortOrder
    effective_from?: SortOrderInput | SortOrder
    effective_to?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    approved_by?: SortOrderInput | SortOrder
    approval_date?: SortOrderInput | SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type CompanyPolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyPolicyWhereInput | CompanyPolicyWhereInput[]
    OR?: CompanyPolicyWhereInput[]
    NOT?: CompanyPolicyWhereInput | CompanyPolicyWhereInput[]
    company_id?: StringFilter<"CompanyPolicy"> | string
    policy_type?: StringFilter<"CompanyPolicy"> | string
    name?: StringFilter<"CompanyPolicy"> | string
    description?: StringNullableFilter<"CompanyPolicy"> | string | null
    rules?: JsonNullableFilter<"CompanyPolicy">
    is_active?: BoolFilter<"CompanyPolicy"> | boolean
    priority?: IntNullableFilter<"CompanyPolicy"> | number | null
    effective_from?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    effective_to?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    created_by?: StringNullableFilter<"CompanyPolicy"> | string | null
    approved_by?: StringNullableFilter<"CompanyPolicy"> | string | null
    approval_date?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    version?: IntFilter<"CompanyPolicy"> | number
    created_at?: DateTimeFilter<"CompanyPolicy"> | Date | string
    updated_at?: DateTimeFilter<"CompanyPolicy"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id">

  export type CompanyPolicyOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    policy_type?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    rules?: SortOrderInput | SortOrder
    is_active?: SortOrder
    priority?: SortOrderInput | SortOrder
    effective_from?: SortOrderInput | SortOrder
    effective_to?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    approved_by?: SortOrderInput | SortOrder
    approval_date?: SortOrderInput | SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CompanyPolicyCountOrderByAggregateInput
    _avg?: CompanyPolicyAvgOrderByAggregateInput
    _max?: CompanyPolicyMaxOrderByAggregateInput
    _min?: CompanyPolicyMinOrderByAggregateInput
    _sum?: CompanyPolicySumOrderByAggregateInput
  }

  export type CompanyPolicyScalarWhereWithAggregatesInput = {
    AND?: CompanyPolicyScalarWhereWithAggregatesInput | CompanyPolicyScalarWhereWithAggregatesInput[]
    OR?: CompanyPolicyScalarWhereWithAggregatesInput[]
    NOT?: CompanyPolicyScalarWhereWithAggregatesInput | CompanyPolicyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyPolicy"> | string
    company_id?: StringWithAggregatesFilter<"CompanyPolicy"> | string
    policy_type?: StringWithAggregatesFilter<"CompanyPolicy"> | string
    name?: StringWithAggregatesFilter<"CompanyPolicy"> | string
    description?: StringNullableWithAggregatesFilter<"CompanyPolicy"> | string | null
    rules?: JsonNullableWithAggregatesFilter<"CompanyPolicy">
    is_active?: BoolWithAggregatesFilter<"CompanyPolicy"> | boolean
    priority?: IntNullableWithAggregatesFilter<"CompanyPolicy"> | number | null
    effective_from?: DateTimeNullableWithAggregatesFilter<"CompanyPolicy"> | Date | string | null
    effective_to?: DateTimeNullableWithAggregatesFilter<"CompanyPolicy"> | Date | string | null
    created_by?: StringNullableWithAggregatesFilter<"CompanyPolicy"> | string | null
    approved_by?: StringNullableWithAggregatesFilter<"CompanyPolicy"> | string | null
    approval_date?: DateTimeNullableWithAggregatesFilter<"CompanyPolicy"> | Date | string | null
    version?: IntWithAggregatesFilter<"CompanyPolicy"> | number
    created_at?: DateTimeWithAggregatesFilter<"CompanyPolicy"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CompanyPolicy"> | Date | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    company_id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    code?: StringFilter<"Department"> | string
    cost_center?: StringNullableFilter<"Department"> | string | null
    budget_allocated?: FloatNullableFilter<"Department"> | number | null
    budget_used?: FloatNullableFilter<"Department"> | number | null
    manager_id?: StringNullableFilter<"Department"> | string | null
    parent_id?: StringNullableFilter<"Department"> | string | null
    level?: IntNullableFilter<"Department"> | number | null
    path?: StringNullableFilter<"Department"> | string | null
    is_active?: BoolFilter<"Department"> | boolean
    created_at?: DateTimeFilter<"Department"> | Date | string
    updated_at?: DateTimeFilter<"Department"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    employees?: CompanyEmployeeListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    cost_center?: SortOrderInput | SortOrder
    budget_allocated?: SortOrderInput | SortOrder
    budget_used?: SortOrderInput | SortOrder
    manager_id?: SortOrderInput | SortOrder
    parent_id?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    path?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    company?: CompanyOrderByWithRelationInput
    employees?: CompanyEmployeeOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    company_id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    code?: StringFilter<"Department"> | string
    cost_center?: StringNullableFilter<"Department"> | string | null
    budget_allocated?: FloatNullableFilter<"Department"> | number | null
    budget_used?: FloatNullableFilter<"Department"> | number | null
    manager_id?: StringNullableFilter<"Department"> | string | null
    parent_id?: StringNullableFilter<"Department"> | string | null
    level?: IntNullableFilter<"Department"> | number | null
    path?: StringNullableFilter<"Department"> | string | null
    is_active?: BoolFilter<"Department"> | boolean
    created_at?: DateTimeFilter<"Department"> | Date | string
    updated_at?: DateTimeFilter<"Department"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    employees?: CompanyEmployeeListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    code?: SortOrder
    cost_center?: SortOrderInput | SortOrder
    budget_allocated?: SortOrderInput | SortOrder
    budget_used?: SortOrderInput | SortOrder
    manager_id?: SortOrderInput | SortOrder
    parent_id?: SortOrderInput | SortOrder
    level?: SortOrderInput | SortOrder
    path?: SortOrderInput | SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    company_id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    code?: StringWithAggregatesFilter<"Department"> | string
    cost_center?: StringNullableWithAggregatesFilter<"Department"> | string | null
    budget_allocated?: FloatNullableWithAggregatesFilter<"Department"> | number | null
    budget_used?: FloatNullableWithAggregatesFilter<"Department"> | number | null
    manager_id?: StringNullableWithAggregatesFilter<"Department"> | string | null
    parent_id?: StringNullableWithAggregatesFilter<"Department"> | string | null
    level?: IntNullableWithAggregatesFilter<"Department"> | number | null
    path?: StringNullableWithAggregatesFilter<"Department"> | string | null
    is_active?: BoolWithAggregatesFilter<"Department"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type CompanySettingWhereInput = {
    AND?: CompanySettingWhereInput | CompanySettingWhereInput[]
    OR?: CompanySettingWhereInput[]
    NOT?: CompanySettingWhereInput | CompanySettingWhereInput[]
    id?: StringFilter<"CompanySetting"> | string
    company_id?: StringFilter<"CompanySetting"> | string
    category?: StringFilter<"CompanySetting"> | string
    key?: StringFilter<"CompanySetting"> | string
    value?: JsonNullableFilter<"CompanySetting">
    data_type?: StringFilter<"CompanySetting"> | string
    is_encrypted?: BoolFilter<"CompanySetting"> | boolean
    description?: StringNullableFilter<"CompanySetting"> | string | null
    created_at?: DateTimeFilter<"CompanySetting"> | Date | string
    updated_at?: DateTimeFilter<"CompanySetting"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type CompanySettingOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrder
    category?: SortOrder
    key?: SortOrder
    value?: SortOrderInput | SortOrder
    data_type?: SortOrder
    is_encrypted?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type CompanySettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    company_id_category_key?: CompanySettingCompany_idCategoryKeyCompoundUniqueInput
    AND?: CompanySettingWhereInput | CompanySettingWhereInput[]
    OR?: CompanySettingWhereInput[]
    NOT?: CompanySettingWhereInput | CompanySettingWhereInput[]
    company_id?: StringFilter<"CompanySetting"> | string
    category?: StringFilter<"CompanySetting"> | string
    key?: StringFilter<"CompanySetting"> | string
    value?: JsonNullableFilter<"CompanySetting">
    data_type?: StringFilter<"CompanySetting"> | string
    is_encrypted?: BoolFilter<"CompanySetting"> | boolean
    description?: StringNullableFilter<"CompanySetting"> | string | null
    created_at?: DateTimeFilter<"CompanySetting"> | Date | string
    updated_at?: DateTimeFilter<"CompanySetting"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id" | "company_id_category_key">

  export type CompanySettingOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrder
    category?: SortOrder
    key?: SortOrder
    value?: SortOrderInput | SortOrder
    data_type?: SortOrder
    is_encrypted?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CompanySettingCountOrderByAggregateInput
    _max?: CompanySettingMaxOrderByAggregateInput
    _min?: CompanySettingMinOrderByAggregateInput
  }

  export type CompanySettingScalarWhereWithAggregatesInput = {
    AND?: CompanySettingScalarWhereWithAggregatesInput | CompanySettingScalarWhereWithAggregatesInput[]
    OR?: CompanySettingScalarWhereWithAggregatesInput[]
    NOT?: CompanySettingScalarWhereWithAggregatesInput | CompanySettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanySetting"> | string
    company_id?: StringWithAggregatesFilter<"CompanySetting"> | string
    category?: StringWithAggregatesFilter<"CompanySetting"> | string
    key?: StringWithAggregatesFilter<"CompanySetting"> | string
    value?: JsonNullableWithAggregatesFilter<"CompanySetting">
    data_type?: StringWithAggregatesFilter<"CompanySetting"> | string
    is_encrypted?: BoolWithAggregatesFilter<"CompanySetting"> | boolean
    description?: StringNullableWithAggregatesFilter<"CompanySetting"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"CompanySetting"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CompanySetting"> | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyUncheckedCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUncheckedUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyEmployeeCreateInput = {
    id?: string
    user_id: string
    employee_id: string
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
    department?: DepartmentCreateNestedOneWithoutEmployeesInput
  }

  export type CompanyEmployeeUncheckedCreateInput = {
    id?: string
    company_id: string
    user_id: string
    employee_id: string
    department_id?: string | null
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyEmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
    department?: DepartmentUpdateOneWithoutEmployeesNestedInput
  }

  export type CompanyEmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    department_id?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyEmployeeCreateManyInput = {
    id?: string
    company_id: string
    user_id: string
    employee_id: string
    department_id?: string | null
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyEmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyEmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    department_id?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyPolicyCreateInput = {
    id?: string
    policy_type: string
    name: string
    description?: string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: boolean
    priority?: number | null
    effective_from?: Date | string | null
    effective_to?: Date | string | null
    created_by?: string | null
    approved_by?: string | null
    approval_date?: Date | string | null
    version?: number
    created_at?: Date | string
    updated_at?: Date | string
    company: CompanyCreateNestedOneWithoutPoliciesInput
  }

  export type CompanyPolicyUncheckedCreateInput = {
    id?: string
    company_id: string
    policy_type: string
    name: string
    description?: string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: boolean
    priority?: number | null
    effective_from?: Date | string | null
    effective_to?: Date | string | null
    created_by?: string | null
    approved_by?: string | null
    approval_date?: Date | string | null
    version?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyPolicyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    policy_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    effective_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effective_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutPoliciesNestedInput
  }

  export type CompanyPolicyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    policy_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    effective_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effective_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyPolicyCreateManyInput = {
    id?: string
    company_id: string
    policy_type: string
    name: string
    description?: string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: boolean
    priority?: number | null
    effective_from?: Date | string | null
    effective_to?: Date | string | null
    created_by?: string | null
    approved_by?: string | null
    approval_date?: Date | string | null
    version?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyPolicyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    policy_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    effective_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effective_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyPolicyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    policy_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    effective_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effective_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    company: CompanyCreateNestedOneWithoutDepartmentsInput
    employees?: CompanyEmployeeCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    company_id: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employees?: CompanyEmployeeUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDepartmentsNestedInput
    employees?: CompanyEmployeeUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: CompanyEmployeeUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    company_id: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingCreateInput = {
    id?: string
    category: string
    key: string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type: string
    is_encrypted?: boolean
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    company: CompanyCreateNestedOneWithoutCompanySettingInput
  }

  export type CompanySettingUncheckedCreateInput = {
    id?: string
    company_id: string
    category: string
    key: string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type: string
    is_encrypted?: boolean
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanySettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type?: StringFieldUpdateOperationsInput | string
    is_encrypted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCompanySettingNestedInput
  }

  export type CompanySettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type?: StringFieldUpdateOperationsInput | string
    is_encrypted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingCreateManyInput = {
    id?: string
    company_id: string
    category: string
    key: string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type: string
    is_encrypted?: boolean
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanySettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type?: StringFieldUpdateOperationsInput | string
    is_encrypted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type?: StringFieldUpdateOperationsInput | string
    is_encrypted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CompanyEmployeeListRelationFilter = {
    every?: CompanyEmployeeWhereInput
    some?: CompanyEmployeeWhereInput
    none?: CompanyEmployeeWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type CompanyPolicyListRelationFilter = {
    every?: CompanyPolicyWhereInput
    some?: CompanyPolicyWhereInput
    none?: CompanyPolicyWhereInput
  }

  export type CompanySettingListRelationFilter = {
    every?: CompanySettingWhereInput
    some?: CompanySettingWhereInput
    none?: CompanySettingWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CompanyEmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyPolicyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanySettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    registration_number?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    address?: SortOrder
    logo_url?: SortOrder
    status?: SortOrder
    subscription_tier?: SortOrder
    billing_info?: SortOrder
    settings?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    version?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    registration_number?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    logo_url?: SortOrder
    status?: SortOrder
    subscription_tier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    version?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    registration_number?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    industry?: SortOrder
    logo_url?: SortOrder
    status?: SortOrder
    subscription_tier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
    version?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type CompanyEmployeeCompany_idEmployee_idCompoundUniqueInput = {
    company_id: string
    employee_id: string
  }

  export type CompanyEmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    user_id?: SortOrder
    employee_id?: SortOrder
    department_id?: SortOrder
    designation?: SortOrder
    role?: SortOrder
    budget_limit?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    salary_band?: SortOrder
    reporting_manager_id?: SortOrder
    employment_type?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanyEmployeeAvgOrderByAggregateInput = {
    budget_limit?: SortOrder
  }

  export type CompanyEmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    user_id?: SortOrder
    employee_id?: SortOrder
    department_id?: SortOrder
    designation?: SortOrder
    role?: SortOrder
    budget_limit?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    salary_band?: SortOrder
    reporting_manager_id?: SortOrder
    employment_type?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanyEmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    user_id?: SortOrder
    employee_id?: SortOrder
    department_id?: SortOrder
    designation?: SortOrder
    role?: SortOrder
    budget_limit?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    salary_band?: SortOrder
    reporting_manager_id?: SortOrder
    employment_type?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanyEmployeeSumOrderByAggregateInput = {
    budget_limit?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CompanyPolicyCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    policy_type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    rules?: SortOrder
    is_active?: SortOrder
    priority?: SortOrder
    effective_from?: SortOrder
    effective_to?: SortOrder
    created_by?: SortOrder
    approved_by?: SortOrder
    approval_date?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanyPolicyAvgOrderByAggregateInput = {
    priority?: SortOrder
    version?: SortOrder
  }

  export type CompanyPolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    policy_type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    is_active?: SortOrder
    priority?: SortOrder
    effective_from?: SortOrder
    effective_to?: SortOrder
    created_by?: SortOrder
    approved_by?: SortOrder
    approval_date?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanyPolicyMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    policy_type?: SortOrder
    name?: SortOrder
    description?: SortOrder
    is_active?: SortOrder
    priority?: SortOrder
    effective_from?: SortOrder
    effective_to?: SortOrder
    created_by?: SortOrder
    approved_by?: SortOrder
    approval_date?: SortOrder
    version?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanyPolicySumOrderByAggregateInput = {
    priority?: SortOrder
    version?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    cost_center?: SortOrder
    budget_allocated?: SortOrder
    budget_used?: SortOrder
    manager_id?: SortOrder
    parent_id?: SortOrder
    level?: SortOrder
    path?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    budget_allocated?: SortOrder
    budget_used?: SortOrder
    level?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    cost_center?: SortOrder
    budget_allocated?: SortOrder
    budget_used?: SortOrder
    manager_id?: SortOrder
    parent_id?: SortOrder
    level?: SortOrder
    path?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    code?: SortOrder
    cost_center?: SortOrder
    budget_allocated?: SortOrder
    budget_used?: SortOrder
    manager_id?: SortOrder
    parent_id?: SortOrder
    level?: SortOrder
    path?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    budget_allocated?: SortOrder
    budget_used?: SortOrder
    level?: SortOrder
  }

  export type CompanySettingCompany_idCategoryKeyCompoundUniqueInput = {
    company_id: string
    category: string
    key: string
  }

  export type CompanySettingCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    category?: SortOrder
    key?: SortOrder
    value?: SortOrder
    data_type?: SortOrder
    is_encrypted?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanySettingMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    category?: SortOrder
    key?: SortOrder
    data_type?: SortOrder
    is_encrypted?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanySettingMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    category?: SortOrder
    key?: SortOrder
    data_type?: SortOrder
    is_encrypted?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CompanyEmployeeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyEmployeeCreateWithoutCompanyInput, CompanyEmployeeUncheckedCreateWithoutCompanyInput> | CompanyEmployeeCreateWithoutCompanyInput[] | CompanyEmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutCompanyInput | CompanyEmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyEmployeeCreateManyCompanyInputEnvelope
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type CompanyPolicyCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyPolicyCreateWithoutCompanyInput, CompanyPolicyUncheckedCreateWithoutCompanyInput> | CompanyPolicyCreateWithoutCompanyInput[] | CompanyPolicyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyPolicyCreateOrConnectWithoutCompanyInput | CompanyPolicyCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyPolicyCreateManyCompanyInputEnvelope
    connect?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
  }

  export type CompanySettingCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanySettingCreateWithoutCompanyInput, CompanySettingUncheckedCreateWithoutCompanyInput> | CompanySettingCreateWithoutCompanyInput[] | CompanySettingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanySettingCreateOrConnectWithoutCompanyInput | CompanySettingCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanySettingCreateManyCompanyInputEnvelope
    connect?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
  }

  export type CompanyEmployeeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyEmployeeCreateWithoutCompanyInput, CompanyEmployeeUncheckedCreateWithoutCompanyInput> | CompanyEmployeeCreateWithoutCompanyInput[] | CompanyEmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutCompanyInput | CompanyEmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyEmployeeCreateManyCompanyInputEnvelope
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type CompanyPolicyUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyPolicyCreateWithoutCompanyInput, CompanyPolicyUncheckedCreateWithoutCompanyInput> | CompanyPolicyCreateWithoutCompanyInput[] | CompanyPolicyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyPolicyCreateOrConnectWithoutCompanyInput | CompanyPolicyCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyPolicyCreateManyCompanyInputEnvelope
    connect?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
  }

  export type CompanySettingUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanySettingCreateWithoutCompanyInput, CompanySettingUncheckedCreateWithoutCompanyInput> | CompanySettingCreateWithoutCompanyInput[] | CompanySettingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanySettingCreateOrConnectWithoutCompanyInput | CompanySettingCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanySettingCreateManyCompanyInputEnvelope
    connect?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyEmployeeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyEmployeeCreateWithoutCompanyInput, CompanyEmployeeUncheckedCreateWithoutCompanyInput> | CompanyEmployeeCreateWithoutCompanyInput[] | CompanyEmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutCompanyInput | CompanyEmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyEmployeeUpsertWithWhereUniqueWithoutCompanyInput | CompanyEmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyEmployeeCreateManyCompanyInputEnvelope
    set?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    disconnect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    delete?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    update?: CompanyEmployeeUpdateWithWhereUniqueWithoutCompanyInput | CompanyEmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyEmployeeUpdateManyWithWhereWithoutCompanyInput | CompanyEmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyEmployeeScalarWhereInput | CompanyEmployeeScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCompanyInput | DepartmentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCompanyInput | DepartmentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCompanyInput | DepartmentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type CompanyPolicyUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyPolicyCreateWithoutCompanyInput, CompanyPolicyUncheckedCreateWithoutCompanyInput> | CompanyPolicyCreateWithoutCompanyInput[] | CompanyPolicyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyPolicyCreateOrConnectWithoutCompanyInput | CompanyPolicyCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyPolicyUpsertWithWhereUniqueWithoutCompanyInput | CompanyPolicyUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyPolicyCreateManyCompanyInputEnvelope
    set?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    disconnect?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    delete?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    connect?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    update?: CompanyPolicyUpdateWithWhereUniqueWithoutCompanyInput | CompanyPolicyUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyPolicyUpdateManyWithWhereWithoutCompanyInput | CompanyPolicyUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyPolicyScalarWhereInput | CompanyPolicyScalarWhereInput[]
  }

  export type CompanySettingUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanySettingCreateWithoutCompanyInput, CompanySettingUncheckedCreateWithoutCompanyInput> | CompanySettingCreateWithoutCompanyInput[] | CompanySettingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanySettingCreateOrConnectWithoutCompanyInput | CompanySettingCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanySettingUpsertWithWhereUniqueWithoutCompanyInput | CompanySettingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanySettingCreateManyCompanyInputEnvelope
    set?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    disconnect?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    delete?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    connect?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    update?: CompanySettingUpdateWithWhereUniqueWithoutCompanyInput | CompanySettingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanySettingUpdateManyWithWhereWithoutCompanyInput | CompanySettingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanySettingScalarWhereInput | CompanySettingScalarWhereInput[]
  }

  export type CompanyEmployeeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyEmployeeCreateWithoutCompanyInput, CompanyEmployeeUncheckedCreateWithoutCompanyInput> | CompanyEmployeeCreateWithoutCompanyInput[] | CompanyEmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutCompanyInput | CompanyEmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyEmployeeUpsertWithWhereUniqueWithoutCompanyInput | CompanyEmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyEmployeeCreateManyCompanyInputEnvelope
    set?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    disconnect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    delete?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    update?: CompanyEmployeeUpdateWithWhereUniqueWithoutCompanyInput | CompanyEmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyEmployeeUpdateManyWithWhereWithoutCompanyInput | CompanyEmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyEmployeeScalarWhereInput | CompanyEmployeeScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCompanyInput | DepartmentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCompanyInput | DepartmentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCompanyInput | DepartmentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type CompanyPolicyUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyPolicyCreateWithoutCompanyInput, CompanyPolicyUncheckedCreateWithoutCompanyInput> | CompanyPolicyCreateWithoutCompanyInput[] | CompanyPolicyUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyPolicyCreateOrConnectWithoutCompanyInput | CompanyPolicyCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyPolicyUpsertWithWhereUniqueWithoutCompanyInput | CompanyPolicyUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyPolicyCreateManyCompanyInputEnvelope
    set?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    disconnect?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    delete?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    connect?: CompanyPolicyWhereUniqueInput | CompanyPolicyWhereUniqueInput[]
    update?: CompanyPolicyUpdateWithWhereUniqueWithoutCompanyInput | CompanyPolicyUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyPolicyUpdateManyWithWhereWithoutCompanyInput | CompanyPolicyUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyPolicyScalarWhereInput | CompanyPolicyScalarWhereInput[]
  }

  export type CompanySettingUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanySettingCreateWithoutCompanyInput, CompanySettingUncheckedCreateWithoutCompanyInput> | CompanySettingCreateWithoutCompanyInput[] | CompanySettingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanySettingCreateOrConnectWithoutCompanyInput | CompanySettingCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanySettingUpsertWithWhereUniqueWithoutCompanyInput | CompanySettingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanySettingCreateManyCompanyInputEnvelope
    set?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    disconnect?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    delete?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    connect?: CompanySettingWhereUniqueInput | CompanySettingWhereUniqueInput[]
    update?: CompanySettingUpdateWithWhereUniqueWithoutCompanyInput | CompanySettingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanySettingUpdateManyWithWhereWithoutCompanyInput | CompanySettingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanySettingScalarWhereInput | CompanySettingScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    connect?: CompanyWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEmployeesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CompanyUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    upsert?: CompanyUpsertWithoutEmployeesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutEmployeesInput, CompanyUpdateWithoutEmployeesInput>, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type DepartmentUpdateOneWithoutEmployeesNestedInput = {
    create?: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEmployeesInput
    upsert?: DepartmentUpsertWithoutEmployeesInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutEmployeesInput, DepartmentUpdateWithoutEmployeesInput>, DepartmentUncheckedUpdateWithoutEmployeesInput>
  }

  export type CompanyCreateNestedOneWithoutPoliciesInput = {
    create?: XOR<CompanyCreateWithoutPoliciesInput, CompanyUncheckedCreateWithoutPoliciesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPoliciesInput
    connect?: CompanyWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneRequiredWithoutPoliciesNestedInput = {
    create?: XOR<CompanyCreateWithoutPoliciesInput, CompanyUncheckedCreateWithoutPoliciesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPoliciesInput
    upsert?: CompanyUpsertWithoutPoliciesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutPoliciesInput, CompanyUpdateWithoutPoliciesInput>, CompanyUncheckedUpdateWithoutPoliciesInput>
  }

  export type CompanyCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDepartmentsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyEmployeeCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CompanyEmployeeCreateWithoutDepartmentInput, CompanyEmployeeUncheckedCreateWithoutDepartmentInput> | CompanyEmployeeCreateWithoutDepartmentInput[] | CompanyEmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutDepartmentInput | CompanyEmployeeCreateOrConnectWithoutDepartmentInput[]
    createMany?: CompanyEmployeeCreateManyDepartmentInputEnvelope
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
  }

  export type CompanyEmployeeUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CompanyEmployeeCreateWithoutDepartmentInput, CompanyEmployeeUncheckedCreateWithoutDepartmentInput> | CompanyEmployeeCreateWithoutDepartmentInput[] | CompanyEmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutDepartmentInput | CompanyEmployeeCreateOrConnectWithoutDepartmentInput[]
    createMany?: CompanyEmployeeCreateManyDepartmentInputEnvelope
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDepartmentsInput
    upsert?: CompanyUpsertWithoutDepartmentsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutDepartmentsInput, CompanyUpdateWithoutDepartmentsInput>, CompanyUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CompanyEmployeeUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CompanyEmployeeCreateWithoutDepartmentInput, CompanyEmployeeUncheckedCreateWithoutDepartmentInput> | CompanyEmployeeCreateWithoutDepartmentInput[] | CompanyEmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutDepartmentInput | CompanyEmployeeCreateOrConnectWithoutDepartmentInput[]
    upsert?: CompanyEmployeeUpsertWithWhereUniqueWithoutDepartmentInput | CompanyEmployeeUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CompanyEmployeeCreateManyDepartmentInputEnvelope
    set?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    disconnect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    delete?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    update?: CompanyEmployeeUpdateWithWhereUniqueWithoutDepartmentInput | CompanyEmployeeUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CompanyEmployeeUpdateManyWithWhereWithoutDepartmentInput | CompanyEmployeeUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CompanyEmployeeScalarWhereInput | CompanyEmployeeScalarWhereInput[]
  }

  export type CompanyEmployeeUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CompanyEmployeeCreateWithoutDepartmentInput, CompanyEmployeeUncheckedCreateWithoutDepartmentInput> | CompanyEmployeeCreateWithoutDepartmentInput[] | CompanyEmployeeUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CompanyEmployeeCreateOrConnectWithoutDepartmentInput | CompanyEmployeeCreateOrConnectWithoutDepartmentInput[]
    upsert?: CompanyEmployeeUpsertWithWhereUniqueWithoutDepartmentInput | CompanyEmployeeUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CompanyEmployeeCreateManyDepartmentInputEnvelope
    set?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    disconnect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    delete?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    connect?: CompanyEmployeeWhereUniqueInput | CompanyEmployeeWhereUniqueInput[]
    update?: CompanyEmployeeUpdateWithWhereUniqueWithoutDepartmentInput | CompanyEmployeeUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CompanyEmployeeUpdateManyWithWhereWithoutDepartmentInput | CompanyEmployeeUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CompanyEmployeeScalarWhereInput | CompanyEmployeeScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutCompanySettingInput = {
    create?: XOR<CompanyCreateWithoutCompanySettingInput, CompanyUncheckedCreateWithoutCompanySettingInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCompanySettingInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutCompanySettingNestedInput = {
    create?: XOR<CompanyCreateWithoutCompanySettingInput, CompanyUncheckedCreateWithoutCompanySettingInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCompanySettingInput
    upsert?: CompanyUpsertWithoutCompanySettingInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutCompanySettingInput, CompanyUpdateWithoutCompanySettingInput>, CompanyUncheckedUpdateWithoutCompanySettingInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CompanyEmployeeCreateWithoutCompanyInput = {
    id?: string
    user_id: string
    employee_id: string
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    department?: DepartmentCreateNestedOneWithoutEmployeesInput
  }

  export type CompanyEmployeeUncheckedCreateWithoutCompanyInput = {
    id?: string
    user_id: string
    employee_id: string
    department_id?: string | null
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyEmployeeCreateOrConnectWithoutCompanyInput = {
    where: CompanyEmployeeWhereUniqueInput
    create: XOR<CompanyEmployeeCreateWithoutCompanyInput, CompanyEmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyEmployeeCreateManyCompanyInputEnvelope = {
    data: CompanyEmployeeCreateManyCompanyInput | CompanyEmployeeCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutCompanyInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employees?: CompanyEmployeeCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    employees?: CompanyEmployeeUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput>
  }

  export type DepartmentCreateManyCompanyInputEnvelope = {
    data: DepartmentCreateManyCompanyInput | DepartmentCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanyPolicyCreateWithoutCompanyInput = {
    id?: string
    policy_type: string
    name: string
    description?: string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: boolean
    priority?: number | null
    effective_from?: Date | string | null
    effective_to?: Date | string | null
    created_by?: string | null
    approved_by?: string | null
    approval_date?: Date | string | null
    version?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyPolicyUncheckedCreateWithoutCompanyInput = {
    id?: string
    policy_type: string
    name: string
    description?: string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: boolean
    priority?: number | null
    effective_from?: Date | string | null
    effective_to?: Date | string | null
    created_by?: string | null
    approved_by?: string | null
    approval_date?: Date | string | null
    version?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyPolicyCreateOrConnectWithoutCompanyInput = {
    where: CompanyPolicyWhereUniqueInput
    create: XOR<CompanyPolicyCreateWithoutCompanyInput, CompanyPolicyUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyPolicyCreateManyCompanyInputEnvelope = {
    data: CompanyPolicyCreateManyCompanyInput | CompanyPolicyCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanySettingCreateWithoutCompanyInput = {
    id?: string
    category: string
    key: string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type: string
    is_encrypted?: boolean
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanySettingUncheckedCreateWithoutCompanyInput = {
    id?: string
    category: string
    key: string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type: string
    is_encrypted?: boolean
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanySettingCreateOrConnectWithoutCompanyInput = {
    where: CompanySettingWhereUniqueInput
    create: XOR<CompanySettingCreateWithoutCompanyInput, CompanySettingUncheckedCreateWithoutCompanyInput>
  }

  export type CompanySettingCreateManyCompanyInputEnvelope = {
    data: CompanySettingCreateManyCompanyInput | CompanySettingCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanyEmployeeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyEmployeeWhereUniqueInput
    update: XOR<CompanyEmployeeUpdateWithoutCompanyInput, CompanyEmployeeUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyEmployeeCreateWithoutCompanyInput, CompanyEmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyEmployeeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyEmployeeWhereUniqueInput
    data: XOR<CompanyEmployeeUpdateWithoutCompanyInput, CompanyEmployeeUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyEmployeeUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyEmployeeScalarWhereInput
    data: XOR<CompanyEmployeeUpdateManyMutationInput, CompanyEmployeeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyEmployeeScalarWhereInput = {
    AND?: CompanyEmployeeScalarWhereInput | CompanyEmployeeScalarWhereInput[]
    OR?: CompanyEmployeeScalarWhereInput[]
    NOT?: CompanyEmployeeScalarWhereInput | CompanyEmployeeScalarWhereInput[]
    id?: StringFilter<"CompanyEmployee"> | string
    company_id?: StringFilter<"CompanyEmployee"> | string
    user_id?: StringFilter<"CompanyEmployee"> | string
    employee_id?: StringFilter<"CompanyEmployee"> | string
    department_id?: StringNullableFilter<"CompanyEmployee"> | string | null
    designation?: StringNullableFilter<"CompanyEmployee"> | string | null
    role?: StringFilter<"CompanyEmployee"> | string
    budget_limit?: FloatNullableFilter<"CompanyEmployee"> | number | null
    start_date?: DateTimeNullableFilter<"CompanyEmployee"> | Date | string | null
    end_date?: DateTimeNullableFilter<"CompanyEmployee"> | Date | string | null
    salary_band?: StringNullableFilter<"CompanyEmployee"> | string | null
    reporting_manager_id?: StringNullableFilter<"CompanyEmployee"> | string | null
    employment_type?: StringNullableFilter<"CompanyEmployee"> | string | null
    status?: StringFilter<"CompanyEmployee"> | string
    created_at?: DateTimeFilter<"CompanyEmployee"> | Date | string
    updated_at?: DateTimeFilter<"CompanyEmployee"> | Date | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutCompanyInput, DepartmentUncheckedUpdateWithoutCompanyInput>
    create: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutCompanyInput, DepartmentUncheckedUpdateWithoutCompanyInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutCompanyInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutCompanyInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    company_id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    code?: StringFilter<"Department"> | string
    cost_center?: StringNullableFilter<"Department"> | string | null
    budget_allocated?: FloatNullableFilter<"Department"> | number | null
    budget_used?: FloatNullableFilter<"Department"> | number | null
    manager_id?: StringNullableFilter<"Department"> | string | null
    parent_id?: StringNullableFilter<"Department"> | string | null
    level?: IntNullableFilter<"Department"> | number | null
    path?: StringNullableFilter<"Department"> | string | null
    is_active?: BoolFilter<"Department"> | boolean
    created_at?: DateTimeFilter<"Department"> | Date | string
    updated_at?: DateTimeFilter<"Department"> | Date | string
  }

  export type CompanyPolicyUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyPolicyWhereUniqueInput
    update: XOR<CompanyPolicyUpdateWithoutCompanyInput, CompanyPolicyUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyPolicyCreateWithoutCompanyInput, CompanyPolicyUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyPolicyUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyPolicyWhereUniqueInput
    data: XOR<CompanyPolicyUpdateWithoutCompanyInput, CompanyPolicyUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyPolicyUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyPolicyScalarWhereInput
    data: XOR<CompanyPolicyUpdateManyMutationInput, CompanyPolicyUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyPolicyScalarWhereInput = {
    AND?: CompanyPolicyScalarWhereInput | CompanyPolicyScalarWhereInput[]
    OR?: CompanyPolicyScalarWhereInput[]
    NOT?: CompanyPolicyScalarWhereInput | CompanyPolicyScalarWhereInput[]
    id?: StringFilter<"CompanyPolicy"> | string
    company_id?: StringFilter<"CompanyPolicy"> | string
    policy_type?: StringFilter<"CompanyPolicy"> | string
    name?: StringFilter<"CompanyPolicy"> | string
    description?: StringNullableFilter<"CompanyPolicy"> | string | null
    rules?: JsonNullableFilter<"CompanyPolicy">
    is_active?: BoolFilter<"CompanyPolicy"> | boolean
    priority?: IntNullableFilter<"CompanyPolicy"> | number | null
    effective_from?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    effective_to?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    created_by?: StringNullableFilter<"CompanyPolicy"> | string | null
    approved_by?: StringNullableFilter<"CompanyPolicy"> | string | null
    approval_date?: DateTimeNullableFilter<"CompanyPolicy"> | Date | string | null
    version?: IntFilter<"CompanyPolicy"> | number
    created_at?: DateTimeFilter<"CompanyPolicy"> | Date | string
    updated_at?: DateTimeFilter<"CompanyPolicy"> | Date | string
  }

  export type CompanySettingUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanySettingWhereUniqueInput
    update: XOR<CompanySettingUpdateWithoutCompanyInput, CompanySettingUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanySettingCreateWithoutCompanyInput, CompanySettingUncheckedCreateWithoutCompanyInput>
  }

  export type CompanySettingUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanySettingWhereUniqueInput
    data: XOR<CompanySettingUpdateWithoutCompanyInput, CompanySettingUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanySettingUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanySettingScalarWhereInput
    data: XOR<CompanySettingUpdateManyMutationInput, CompanySettingUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanySettingScalarWhereInput = {
    AND?: CompanySettingScalarWhereInput | CompanySettingScalarWhereInput[]
    OR?: CompanySettingScalarWhereInput[]
    NOT?: CompanySettingScalarWhereInput | CompanySettingScalarWhereInput[]
    id?: StringFilter<"CompanySetting"> | string
    company_id?: StringFilter<"CompanySetting"> | string
    category?: StringFilter<"CompanySetting"> | string
    key?: StringFilter<"CompanySetting"> | string
    value?: JsonNullableFilter<"CompanySetting">
    data_type?: StringFilter<"CompanySetting"> | string
    is_encrypted?: BoolFilter<"CompanySetting"> | boolean
    description?: StringNullableFilter<"CompanySetting"> | string | null
    created_at?: DateTimeFilter<"CompanySetting"> | Date | string
    updated_at?: DateTimeFilter<"CompanySetting"> | Date | string
  }

  export type CompanyCreateWithoutEmployeesInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutEmployeesInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyUncheckedCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEmployeesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
  }

  export type DepartmentCreateWithoutEmployeesInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    company: CompanyCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutEmployeesInput = {
    id?: string
    company_id: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DepartmentCreateOrConnectWithoutEmployeesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
  }

  export type CompanyUpsertWithoutEmployeesInput = {
    update: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type CompanyUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUncheckedUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type DepartmentUpsertWithoutEmployeesInput = {
    update: XOR<DepartmentUpdateWithoutEmployeesInput, DepartmentUncheckedUpdateWithoutEmployeesInput>
    create: XOR<DepartmentCreateWithoutEmployeesInput, DepartmentUncheckedCreateWithoutEmployeesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutEmployeesInput, DepartmentUncheckedUpdateWithoutEmployeesInput>
  }

  export type DepartmentUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutEmployeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateWithoutPoliciesInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutPoliciesInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutPoliciesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutPoliciesInput, CompanyUncheckedCreateWithoutPoliciesInput>
  }

  export type CompanyUpsertWithoutPoliciesInput = {
    update: XOR<CompanyUpdateWithoutPoliciesInput, CompanyUncheckedUpdateWithoutPoliciesInput>
    create: XOR<CompanyCreateWithoutPoliciesInput, CompanyUncheckedCreateWithoutPoliciesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutPoliciesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutPoliciesInput, CompanyUncheckedUpdateWithoutPoliciesInput>
  }

  export type CompanyUpdateWithoutPoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutPoliciesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeUncheckedCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyUncheckedCreateNestedManyWithoutCompanyInput
    CompanySetting?: CompanySettingUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDepartmentsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
  }

  export type CompanyEmployeeCreateWithoutDepartmentInput = {
    id?: string
    user_id: string
    employee_id: string
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
    company: CompanyCreateNestedOneWithoutEmployeesInput
  }

  export type CompanyEmployeeUncheckedCreateWithoutDepartmentInput = {
    id?: string
    company_id: string
    user_id: string
    employee_id: string
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyEmployeeCreateOrConnectWithoutDepartmentInput = {
    where: CompanyEmployeeWhereUniqueInput
    create: XOR<CompanyEmployeeCreateWithoutDepartmentInput, CompanyEmployeeUncheckedCreateWithoutDepartmentInput>
  }

  export type CompanyEmployeeCreateManyDepartmentInputEnvelope = {
    data: CompanyEmployeeCreateManyDepartmentInput | CompanyEmployeeCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutDepartmentsInput = {
    update: XOR<CompanyUpdateWithoutDepartmentsInput, CompanyUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutDepartmentsInput, CompanyUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CompanyUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUncheckedUpdateManyWithoutCompanyNestedInput
    CompanySetting?: CompanySettingUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyEmployeeUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: CompanyEmployeeWhereUniqueInput
    update: XOR<CompanyEmployeeUpdateWithoutDepartmentInput, CompanyEmployeeUncheckedUpdateWithoutDepartmentInput>
    create: XOR<CompanyEmployeeCreateWithoutDepartmentInput, CompanyEmployeeUncheckedCreateWithoutDepartmentInput>
  }

  export type CompanyEmployeeUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: CompanyEmployeeWhereUniqueInput
    data: XOR<CompanyEmployeeUpdateWithoutDepartmentInput, CompanyEmployeeUncheckedUpdateWithoutDepartmentInput>
  }

  export type CompanyEmployeeUpdateManyWithWhereWithoutDepartmentInput = {
    where: CompanyEmployeeScalarWhereInput
    data: XOR<CompanyEmployeeUpdateManyMutationInput, CompanyEmployeeUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type CompanyCreateWithoutCompanySettingInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCompanySettingInput = {
    id?: string
    name: string
    registration_number: string
    email: string
    phone?: string | null
    website?: string | null
    industry?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: string | null
    status: string
    subscription_tier: string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    created_by?: string | null
    updated_by?: string | null
    version?: number
    employees?: CompanyEmployeeUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    policies?: CompanyPolicyUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCompanySettingInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCompanySettingInput, CompanyUncheckedCreateWithoutCompanySettingInput>
  }

  export type CompanyUpsertWithoutCompanySettingInput = {
    update: XOR<CompanyUpdateWithoutCompanySettingInput, CompanyUncheckedUpdateWithoutCompanySettingInput>
    create: XOR<CompanyCreateWithoutCompanySettingInput, CompanyUncheckedCreateWithoutCompanySettingInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutCompanySettingInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutCompanySettingInput, CompanyUncheckedUpdateWithoutCompanySettingInput>
  }

  export type CompanyUpdateWithoutCompanySettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCompanySettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registration_number?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    subscription_tier?: StringFieldUpdateOperationsInput | string
    billing_info?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    employees?: CompanyEmployeeUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    policies?: CompanyPolicyUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyEmployeeCreateManyCompanyInput = {
    id?: string
    user_id: string
    employee_id: string
    department_id?: string | null
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DepartmentCreateManyCompanyInput = {
    id?: string
    name: string
    description?: string | null
    code: string
    cost_center?: string | null
    budget_allocated?: number | null
    budget_used?: number | null
    manager_id?: string | null
    parent_id?: string | null
    level?: number | null
    path?: string | null
    is_active?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyPolicyCreateManyCompanyInput = {
    id?: string
    policy_type: string
    name: string
    description?: string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: boolean
    priority?: number | null
    effective_from?: Date | string | null
    effective_to?: Date | string | null
    created_by?: string | null
    approved_by?: string | null
    approval_date?: Date | string | null
    version?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanySettingCreateManyCompanyInput = {
    id?: string
    category: string
    key: string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type: string
    is_encrypted?: boolean
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyEmployeeUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutEmployeesNestedInput
  }

  export type CompanyEmployeeUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    department_id?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyEmployeeUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    department_id?: NullableStringFieldUpdateOperationsInput | string | null
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: CompanyEmployeeUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: CompanyEmployeeUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    code?: StringFieldUpdateOperationsInput | string
    cost_center?: NullableStringFieldUpdateOperationsInput | string | null
    budget_allocated?: NullableFloatFieldUpdateOperationsInput | number | null
    budget_used?: NullableFloatFieldUpdateOperationsInput | number | null
    manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    parent_id?: NullableStringFieldUpdateOperationsInput | string | null
    level?: NullableIntFieldUpdateOperationsInput | number | null
    path?: NullableStringFieldUpdateOperationsInput | string | null
    is_active?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyPolicyUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    policy_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    effective_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effective_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyPolicyUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    policy_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    effective_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effective_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyPolicyUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    policy_type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: NullableJsonNullValueInput | InputJsonValue
    is_active?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    effective_from?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effective_to?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    version?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type?: StringFieldUpdateOperationsInput | string
    is_encrypted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type?: StringFieldUpdateOperationsInput | string
    is_encrypted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: NullableJsonNullValueInput | InputJsonValue
    data_type?: StringFieldUpdateOperationsInput | string
    is_encrypted?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyEmployeeCreateManyDepartmentInput = {
    id?: string
    company_id: string
    user_id: string
    employee_id: string
    designation?: string | null
    role: string
    budget_limit?: number | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    salary_band?: string | null
    reporting_manager_id?: string | null
    employment_type?: string | null
    status: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CompanyEmployeeUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutEmployeesNestedInput
  }

  export type CompanyEmployeeUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyEmployeeUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    company_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    designation?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    budget_limit?: NullableFloatFieldUpdateOperationsInput | number | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary_band?: NullableStringFieldUpdateOperationsInput | string | null
    reporting_manager_id?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}